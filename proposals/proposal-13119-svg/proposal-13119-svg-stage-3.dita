<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
  <topic id="topic_aqh_5zt_3h">
    <title>Stage 3 proposal: Feature 13119 SVG domain</title>
    <shortdesc>Official domain for SVG</shortdesc>
    <body>
      <section>
        <title>Champion</title>
        <p>Eliot Kimber</p>
      </section>
      <section>
        <title>Tracking information</title>
        <simpletable frame="all" relcolwidth="1.0* 1.0* 1.0*">
          <sthead>
            <stentry>Event</stentry>
            <stentry>Date</stentry>
            <stentry>Links</stentry>
          </sthead>
          <strow>
            <stentry>Stage 1 proposal accepted</stentry>
            <stentry>25 Sept 2012</stentry>
            <stentry><xref
              href="https://www.oasis-open.org/committees/document.php?document_id=47001&amp;wg_abbrev=dita"
              format="php"
              scope="external">https://www.oasis-open.org/committees/document.php?document_id=47001&amp;wg_abbrev=dita</xref></stentry>
          </strow>
          <strow>
            <stentry>Stage 2 proposal submitted</stentry>
            <stentry>1 Oct 2012</stentry>
            <stentry><xref
              href="https://www.oasis-open.org/apps/org/workgroup/dita/download.php/47062/proposal-13119-dita-source.zip"
              format="zip"
              scope="external">https://www.oasis-open.org/apps/org/workgroup/dita/download.php/47062/proposal-13119-dita-source.zip</xref>, <xref
              href="https://www.oasis-open.org/apps/org/workgroup/dita/download.php/47063/proposal-13119-html.zip"
              format="zip"
              scope="external">https://www.oasis-open.org/apps/org/workgroup/dita/download.php/47063/proposal-13119-html.zip</xref></stentry>
          </strow>
          <strow>
            <stentry>Stage 2 proposal discussed</stentry>
            <stentry>16 Oct 2012</stentry>
            <stentry><xref
              href="https://www.oasis-open.org/apps/org/workgroup/dita/download.php/47205/minutes20121016.txt"
              format="txt"
              scope="external">https://www.oasis-open.org/apps/org/workgroup/dita/download.php/47205/minutes20121016.txt</xref></stentry>
          </strow>
          <strow>
            <stentry>Stage 2 proposal approved</stentry>
            <stentry>30 October 2012</stentry>
            <stentry/>
          </strow>
          <strow>
            <stentry>Stage 3 proposal submitted to reviewers</stentry>
            <stentry>2 July 2013</stentry>
            <stentry>Debra Bissantz, Nancy Harrison</stentry>
          </strow>
          <strow>
            <stentry>Stage 3 proposal (this document) submitted</stentry>
            <stentry>18 October 2013</stentry>
            <stentry/>
          </strow>
        </simpletable>
      </section>
      <section>
        <title>Approved technical requirements</title>
        <p>Define a new vocabulary module, svgDomain, that defines the following
          element type:</p>
        <ul
          id="ul_oqh_qp5_sh">
          <li>&lt;svg_container><p>Specializes topic/foreign. Allows as content
            the &lt;svg:svg> element from the SVG 1.1 vocabulary, &lt;data>, or
            &lt;data-about>, as a repeating OR group.</p><p>Because the SVG
            vocabulary includes some elements that have the same local name as
            DITA elements, SVG included in DTD-based or RelaxNG-based documents
            must use prefixed tagnames. Documents that use XSD schemas may use
            unprefixed tagnames.</p></li>
          <li>Include the SVG 1.1 DTD declarations. See <xref
            href="http://www.w3.org/TR/SVG11/svgdtd.html"
            format="html"
            scope="external">http://www.w3.org/TR/SVG11/svgdtd.html</xref>.<p>There
            do no appear to be normative XSD or RelaxNG versions of the SVG
            vocabulary.</p></li>
        </ul>
      </section>
      <section>
        <title>Dependencies or interrelated proposals</title>
        <p>No related proposals.</p>
      </section>
      <section>
        <title>Modified DTDs</title>
            <p>svgDomain.ent</p>
            <p>Create new declaration set <filepath>svgDomain.ent</filepath> in the base declaration set package with the following
              content:<codeblock><coderef href="org.oasis-open.dita.svg.doctypes/doctypes/dtd/svgDomain.ent"/></codeblock></p>
            <p>svgDomain.mod</p>
            <p>Create new declaration set file
              <filepath>svgDomain.mod</filepath> with the following
              content:<codeblock><coderef href="org.oasis-open.dita.svg.doctypes/doctypes/dtd/svgDomain.mod"/></codeblock></p>
      </section>
      <section>
        <title>Modified specification documentation</title>
        <table
          frame="all"
          id="table_dr3_zdl_pk">
          <title>New and Modified Topics</title>
          <tgroup
            cols="4">
            <colspec
              colname="c1"
              colnum="1"
              colwidth="1.0*"/>
            <colspec
              colname="c2"
              colnum="2"
              colwidth="1.0*"/>
            <colspec
              colname="c3"
              colnum="3"
              colwidth="1.0*"/>
            <colspec
              colname="newCol4"
              colnum="4"
              colwidth="1*"/>
            <thead>
              <row>
                <entry>Topic File</entry>
                <entry>DITA 1.2 Text</entry>
                <entry
                  namest="c3"
                  nameend="newCol4">DITA 1.3 Text</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>common/svg-d.dita</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">New topic, under Domain elements</entry>
              </row>
              <row>
                <entry>langref/svg_container.dita</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">New topic</entry>
              </row>
              <row>
                <entry>langref/svgref.dita</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">New topic</entry>
              </row>
              <row>
                <entry>foreigncontentspec.dita</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">Modifed to reflect the SVG domain (full topic included below)</entry>
              </row>
              <row>
                <entry
                  morerows="1">archSpec/dita-linking-link-element-summary.dita</entry>
                <entry
                  morerows="1"/>
                <entry
                  namest="c3"
                  nameend="newCol4">Add an entry for &lt;svgref></entry>
              </row>
              <row>
                <entry>svgref (SVG domain)</entry>
                <entry>Uses an SVG &lt;svg> element stored in a non-DITA
                  document by reference.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </body>
    <concept
      id="concept-1"
      xml:lang="en-us">
      <title>Specializing foreign or unknown content</title>
      <shortdesc>Specializing the &lt;foreign&gt; or &lt;unknown&gt; element is an open extension to DITA for the purpose of incorporating standard vocabularies for non-textual content, such as MathML
        and SVG as markup within DITA documents. <ph>These elements <keyword>should not</keyword> be used to include textual content or metadata in DITA documents except where such content acts as an
        example or display, rather than as the primary content of a topic.</ph></shortdesc>
      <conbody>
        <note>Both MathML and SVG are built-in domains starting with DITA 1.3 and serve as working examples of &lt;foreign> specializations.</note>
        <section
          id="section_C45458033A7347F8BF2D99D251A611C4">
          <title>Incorporating foreign or unknown content</title>
          <p>There are three methods of incorporating foreign content into DITA. </p>
          <ul
            id="ul_35DA1E5F56044DE3BCF73F8CFCCB55DA">
            <li
              id="li_73ABC413E3DA4472BF55D0EF1B73C728">A domain specialization of the &lt;foreign&gt; or &lt;unknown&gt; element. This is the usual implementation.</li>
            <li
              id="li_3DA9AC4CE9114E28A0F601CB66D26A29">A structural specialization using the &lt;foreign&gt; or &lt;unknown&gt; element. This affords more control over the content.</li>
            <li
              id="li_7F1FFDC5D0C54080B1E819E4C1F7B685">Do nothing: simply embed the foreign content within &lt;foreign&gt; or &lt;unknown&gt;.</li>
          </ul>
        </section>
        <section
          id="section_9867B44DADC644579062CBA3B116AF61">
          <title>Foreign or unknown content and the architectural @class attribute</title>
          <p>Foreign content that is incorporated in DITA by one of these methods is not specialized. Specialization depends upon the architectural @class attribute found in every DITA element. If the
            foreign content has interoperability or vocabulary naming issues such as those that are addressed by specialization in DITA, they must be addressed by means that are appropriate to the
            foreign content. </p>
        </section>
        <section>
          <title>Foreign or unknown content, element type name conflicts, and namespaces</title>
          <p>Because foreign vocabularies are integrated into larger DITA document types, it is possible for a foreign vocabulary to have declared element types with the same local names as
            DITA-defined elements integrated into a given DITA document type. If the foreign vocabulary has no element types in common with any of the DITA vocabulary modules integrated into the same
            DITA document type, then there should be no problem creating working DTDs, XSD schemas, or RelaxNG schemas for the DITA document type. </p>
          <p>However, if the foreign vocabulary has any element types with the same local name as a DITA-defined element type, there may be limitations on what can be done in specific document schema
            languages to accommodate the foreign vocabulary. </p>
          <p>If the foreign vocabulary is in a namespace, then it is always possible to construct a DTD, XSD schema, or RelaxNG schema that integrates the foreign vocabulary.  However, if the foreign
            vocabulary is not in a namespace it may be impossible to construct a working DTD or XSD document type that accommodates both the DITA vocabulary and the foreign vocabulary. With RelaxNG
            schemas it is always possible to construct a complete RelaxNG schema that includes the foreign vocabulary.</p>
          <p>For DTDs that integrate a foreign vocabulary that is in a namespace, the foreign elements must use a namespace prefix for all element types with local names that are the same as any
            DITA-defined element type name. The prefix must be fixed in the document type shell (because XML DTDs are not namespace aware). A namespace prefix must be used because DTD validation only
            acts on the tagname as specified on the start tag, not the fuly-qualified element type name. Thus, setting a default namespace within a DTD, while valid in XML, does not serve to
            distinguish the element types for the purposes of DTD validation. While only conflicting element types require the namespace prefix, normal practice is to use the same namespace prefix for
            all element types in the foreign vocabulary. </p>
          <p>For XSD and RelaxNG schemas that integrate a foreign vocabulary that is in a namespace there is no restriction on how the tags are constructed in documents governed by XSD and RelaxNG
            schemas because XSD and RelaxNG are both namespace aware.</p>
          <p>For DTDs that integrate a foreign vocabulary that is not in a namespace and that has element type names that are the same as DITA-defined names integrated in the same document type shell,
            it is impossible to construct a DTD that integrates the foreign vocabulary. This is because DTDs do not provide a mechanism for context-specific element type declarations within a single
            namespace or no namespace. </p>
          <p>For XSD schemas that integrate a foreign vocabulary that is not in a namespace and that has element type names that are the same as DITA-defined names integrated in the same document type
            shell, it is possible to integrate the foreign vocabulary only if the foreign vocabulary's element types are defined within the context of another element type (meaning they are not global
            element types). This is possible but is not common practice (most XSD schemas will define all element types as global types) and may be practically impossible due to the need to use the
            same element type name in different contexts.</p>
        </section>
        <example
          id="example_0566553963A34B66AFC511C71D16B023">
          <title>Example of specializing foreign or unknown content using DTDs</title>
          <p>The sample below shows how to create a domain declaration for SVG markup and integrate it into a document type shell.</p>
          <p>From the <filepath>svgDomain.ent</filepath>
            file:<codeblock>&lt;!-- ============================================================= -->
&lt;!--                   SVG DOMAIN ENTITIES                         -->
&lt;!-- ============================================================= -->

&lt;!-- SVG elements must be prefixed, otherwise they conflict with
     existing DITA elements (e.g., &lt;desc> and &lt;title>.
  -->
&lt;!ENTITY % NS.prefixed "INCLUDE" >
&lt;!ENTITY % SVG.prefix "svg" >

&lt;!ENTITY % svg-d-foreign
   "svg_container
   "
>

&lt;!ENTITY   svg-d-att     
  "(topic svg-d)"
></codeblock></p>
          <p>Note that the SVG-specific <keyword>%SVG.prefix</keyword> parameter entity is declared. This establishes the namespace prefix to be used for the SVG content. It could be overridden in a
            document type shell by declaring the parameter entity before the reference to the <filepath>svgDomain.ent</filepath> file.</p>
          <p>From the <filepath>svgDomain.mod</filepath> file:</p>
          <pre>&lt;!-- =============================================================
     DITA SVG Domain
     ============================================================= -->

 &lt;!ENTITY % svg_container        "svg_container" >
 &lt;!ENTITY % svgref               "svgref" >

&lt;!ENTITY % svg11.dtd 
  SYSTEM "svg11/svg11.dtd"
>%svg11.dtd;

&lt;!-- ============================================================= -->
&lt;!--                   ELEMENT NAME ENTITIES                       -->
&lt;!-- ============================================================= -->


&lt;!-- ============================================================= -->
&lt;!--                    ELEMENT DECLARATIONS                       -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % svg_container.content
"
  (%data; |
   %data-about; |
   %SVG.pfx;svg)*
"
>
&lt;!ENTITY % svg_container.attributes
 "
   %id-atts;
  %localization-atts;
  base       
    CDATA                            
    #IMPLIED
  %base-attribute-extensions;
  outputclass 
    CDATA                            
    #IMPLIED    

 "
> 
&lt;!ELEMENT svg_container %svg_container.content; >
&lt;!ATTLIST svg_container %svg_container.attributes; >

&lt;!-- LONG NAME: SVG Reference -->
&lt;!ENTITY % svgref.content 
"EMPTY" 
>
&lt;!ENTITY % svgref.attributes
             "href 
                        CDATA 
                                  #IMPLIED
              keyref 
                        CDATA 
                                  #IMPLIED
              type 
                        CDATA 
                                  #IMPLIED
              format 
                        CDATA 
                                  #IMPLIED
              scope 
                        (external | 
                         local | 
                         peer | 
                         -dita-use-conref-target) 
                                  #IMPLIED
              %univ-atts;
              outputclass 
                        CDATA 
                                  #IMPLIED"
>
&lt;!ELEMENT svgref    %svgref.content;>
&lt;!ATTLIST svgref    %svgref.attributes;>

&lt;!-- ============================================================= -->
&lt;!--                    SPECIALIZATION ATTRIBUTE DECLARATIONS      -->
&lt;!-- ============================================================= -->

&lt;!ATTLIST svg_container           %global-atts;  class CDATA "+ topic/foreign svg-d/svg_container ">
&lt;!ATTLIST svgref                  %global-atts;  class CDATA "+ topic/xref    svg-d/svgref ">

&lt;!-- ================== End SVG Domain ==================== --> </pre>
          <p>From a document type shell that integrates the SVG
            domain:<codeblock> ...

&lt;!ENTITY % svg-d-dec     
  PUBLIC "-//OASIS//ENTITIES DITA 1.3 SVG Domain//EN" 
         "svgDomain.ent"
>%svg-d-dec;
  
 ...

&lt;!ENTITY % foreign      "foreign | 
                         %svg-d-foreign;
                        ">

  ...

&lt;!ENTITY included-domains 
                          "&amp;hi-d-att; 
                           &amp;ut-d-att; 
                           &amp;indexing-d-att;
                           &amp;hazard-d-att;
                           &amp;svg-d-att;
  "
>

  ...

&lt;!ENTITY % svg-d-def     
  PUBLIC "-//OASIS//ELEMENTS DITA 1.3 SVG Domain//EN" 
         "svgDomain.mod"
>%svg-d-def;

  ...</codeblock></p>
        </example>
        <example
          id="example_8C8549BD3D814F978CAC1C6667B82BE4">
          <title>Example of SVG within a &lt;p&gt; element </title>
          <pre>&lt;p&gt;This is an ellipse:
  &lt;svg_container&gt;
    &lt;svg:svg width="100%" height="100%" version="1.1"
xmlns="http://www.w3.org/2000/svg"&gt;

&lt;ellipse cx="300" cy="150" rx="200" ry="80"
style="fill:rgb(200,100,50);
stroke:rgb(0,0,100);stroke-width:2"/&gt;

    &lt;/svg:svg&gt;    
  &lt;/svg_container&gt;.
&lt;/p&gt; </pre>
        </example>
        <example
          id="example_B14351B0016E4065A4D5CFE991D30BC0">
          <title>Example of specializing foreign content using XML Schemas</title>
          <p>The sample below describes how to create a domain declaration of the mathML element, but does not show how to integrate that declaration in a DITA document-type shell. For more specific
            information on creating document-type shells, see <xref
            href="schemamod.dita#modSchema"
            format="dita"/></p>
          <pre>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;xs:schema
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:m="http://www.w3.org/1998/Math/MathML"  
  elementFormDefault="qualified">
  
  &lt;xs:import schemaLocation="mathml3/mathml3.xsd"
    namespace="http://www.w3.org/1998/Math/MathML"
  />
  
  &lt;xs:group name="mathml-d-foreign">
    &lt;xs:sequence>
      &lt;xs:choice>
        &lt;xs:element ref="mathml_container"/>
      &lt;/xs:choice>
    &lt;/xs:sequence>
  &lt;/xs:group>
  
  &lt;xs:group name="mathml_container.content">
    &lt;xs:choice  minOccurs="0" maxOccurs="unbounded">
      &lt;xs:element ref="m:math"/>
      &lt;xs:group ref="data.elements.incl" minOccurs="0"/>
    &lt;/xs:choice>
  &lt;/xs:group>
  
  &lt;xs:attributeGroup name="mathml_container.attributes">
    &lt;xs:attribute name="outputclass" type="xs:string"/>
    &lt;xs:attributeGroup ref="global-atts"/>
    &lt;xs:attributeGroup ref="univ-atts"/>
  &lt;/xs:attributeGroup>
  
  &lt;xs:complexType name="mathml_container.class" mixed="false">
    &lt;xs:sequence>  
      &lt;xs:group ref="mathml_container.content"/>
    &lt;/xs:sequence>        
    &lt;xs:attributeGroup ref="mathml_container.attributes"/>
  &lt;/xs:complexType>
  
  &lt;xs:element name="mathml_container">
    &lt;xs:annotation>
      &lt;xs:documentation>
        The mathml_container (&amp;lt;&lt;keyword>mathml_container&lt;/keyword>&amp;gt;) element 
        contains zero or more MathML equations, along with optional &amp;lt;&lt;keyword>data&lt;/keyword>&amp;gt;
        or &amp;lt;&lt;keyword>data-about&lt;/keyword>&amp;gt; elements, which act as metadata for the
        equations.
      &lt;/xs:documentation>
    &lt;/xs:annotation>
    &lt;xs:complexType mixed="false">
      &lt;xs:complexContent>
        &lt;xs:extension base="mathml_container.class">
          &lt;xs:attribute ref="class" default="+ topic/foreign mathml-d/mathml_container "/>
        &lt;/xs:extension>
      &lt;/xs:complexContent>
    &lt;/xs:complexType>
  &lt;/xs:element>
  
&lt;/xs:schema>  </pre>
        </example>
        <example
          id="example_34AAE3513574457F8FE30CC970D35211">
          <title>Example of MathML within an &lt;equation-block&gt; element </title>
          <pre>&lt;p&gt;... as in the formula 
&lt;equation-block&gt;
  &lt;!-- sum 4 + x --&gt;
  &lt;mathML&gt;
    &lt;mml:math display="block"&gt;
      &lt;mml:mrow&gt;
        &lt;mml:mo&gt;&amp;sum;&lt;/mml:mo&gt;
        &lt;mml:mn&gt;4&lt;/mml:mn&gt;
        &lt;mml:mo&gt;+&lt;/mml:mo&gt;
        &lt;mml:mi&gt;x&lt;/mml:mi&gt;
      &lt;/mml:mrow&gt;
    &lt;/mml:math&gt;    
  &lt;/mathML&gt;
 &lt;equation-block&gt;.
&lt;/p&gt; </pre>
        </example>
      </conbody>
    </concept>
    <reference
      id="svgdomain"
      xml:lang="en-us">
      <title>SVG elements</title>
      <shortdesc>The SVG domain elements enable direct use of SVG markup within
        DITA documents, as well as use-by-reference of SVG markup held in
        separate non-DITA documents. SVG is a W3C standard,
        <ph>http://www.w3.org/TR/SVG/</ph>. Note that for SVG markup stored
        directly in DTD-validated DITA documents, the SVG elements must use a
        namespace prefix to avoid conflict with DITA-defined elements of the
        same name. Documents validated using XSD or RelaxNG may default the SVG
        namespace on the SVG &lt;svg> element. SVG elements used by reference
        using the &lt;svgref> element do not need to have a namespace prefix
        because they will be parsed separately from the DITA documents that
        refer to them. The domain is configured by default to use the namespace
        prefix "svg" for the SVG elements.</shortdesc>
      <prolog>
        <metadata>
          <keywords>
            <indexterm>Domains elements<indexterm>SVG
              domain</indexterm></indexterm>
            <indexterm>SVG elements</indexterm>
          </keywords>
        </metadata>
      </prolog>
      <reference
        id="reference_y1p_lzw_4k">
        <title>svg_container</title>
        <shortdesc>Contains SVG elements, references to SVG elements held in
          separate, non-DITA documents, &lt;data>, or &lt;data-about>. The SVG
          markup must have a root element of "svg" within the SVG namespace
          "http://www.w3.org/2000/svg".</shortdesc>
        <refbody>
          <section>
            <title>Inheritance</title>
            <p>+ topic/foreign svg-d/svg_container </p>
          </section>
          <section>
            <title>Example</title>
            <p>SVG containers with inline SVG markup:</p>
            <codeblock>&lt;topic id="svg-test-topic-01">
  &lt;title>SVG Domain Test: Namespace Prefixed SVG Elements&lt;/title>
  &lt;body>
    &lt;p>SVG Inline: &lt;svg_container>
      &lt;svg:svg
        width="100"
        height="100">
        &lt;svg:defs>
          &lt;svg:filter
            id="f1"
            x="0"
            y="0">
            &lt;svg:feGaussianBlur
              in="SourceGraphic"
              stdDeviation="15"/>
          &lt;/svg:filter>
        &lt;/svg:defs>
        &lt;svg:rect
          width="90"
          height="90"
          stroke="green"
          stroke-width="3"
          fill="yellow"
          filter="url(#f1)"/>
      &lt;/svg:svg>
      &lt;/svg_container>&lt;/p>
    &lt;p>SVG Directly in body:&lt;/p>
    &lt;svg_container>
      &lt;svg:svg width="200" height="200">
        &lt;svg:ellipse cx="100" cy="100" rx="80" ry="80" style="fill:blue;
          stroke:rgb(0,0,100);stroke-width:2"/>
      &lt;/svg:svg>
    &lt;/svg_container>
    &lt;fig>
      &lt;title>Figure With SVG Container&lt;/title>
      &lt;svg_container>
        &lt;svg:svg width="4in" height="6in" version="1.1"
          >
          &lt;svg:circle cx="150" cy="200" r="100" fill="url(#grad_blue)" >
            &lt;svg:animate attributeName="r" begin="Go.click" end="Stop.click" dur="4s"  
              values="100; 0; 100" repeatCount="indefinite"/>
          &lt;/svg:circle>
          &lt;svg:radialGradient id="grad_blue" cx="20%" cy="20%" r="100%" fx="30%" fy="30%">
            &lt;svg:stop stop-color="white" offset="0"/>
            &lt;svg:stop stop-color="blue" offset="25%"/>
            &lt;svg:stop stop-color="rgb(0,0,192)" offset="50%"/>
            &lt;svg:stop stop-color="rgb(0,0,127)" offset="70%"/>
            &lt;svg:stop stop-color="rgb(0,0,64)" offset="85%"/>
            &lt;svg:stop stop-color="rgb(0,0,0)" offset="100%"/>
          &lt;/svg:radialGradient>
          &lt;svg:g id="Go">
            &lt;svg:rect x="70" y="320" height="40" width="80" fill="aqua"/>
            &lt;svg:text x="90" y="350" font-size="30" fill="green">Go &lt;/svg:text>
          &lt;/svg:g>
          &lt;svg:g id="Stop">
            &lt;svg:rect x="160" y="320" height="40" width="80" fill="aqua"/>
            &lt;svg:text x="170" y="350" font-size="30" fill="red">Stop&lt;/svg:text>
          &lt;/svg:g>
        &lt;/svg:svg>
      &lt;/svg_container>
    &lt;/fig>
  &lt;/body>
&lt;/topic></codeblock>
            <p>An SVG container with a reference to SVG markup held in a separate non-DITA
              document:<codeblock>&lt;fig>
  &lt;title>Figure With SVG Container&lt;/title>
  &lt;svg_container>
    &lt;svgref keyref="svg-fragment-01"/>
  &lt;/svg_container>
&lt;/fig></codeblock></p>
            <p>Where the key "svg-fragment-01" is declared like
              so:<codeblock>&lt;map>
 ...
 &lt;keydef keys="svg-fragment-01"
   href="media/svg/svg-library.xml#frag-0001"
   format="svg"
 />
 ...
&lt;/map></codeblock></p>
          </section>
          <section
            id="attributes">
            <title>Attributes</title>
            <simpletable
              id="foreign_attr"
              relcolwidth="2* 3* 1* 1* 1*">
              <sthead>
                <stentry>Name</stentry>
                <stentry>Description</stentry>
                <stentry>Data Type</stentry>
                <stentry>Default Value</stentry>
                <stentry>Required?</stentry>
              </sthead>
              <strow
                conref="../common/commonLRdefs.dita#commonLRdefs/univ-atts">
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
              </strow>
              <strow
                conref="../common/commonLRdefs.dita#commonLRdefs/global-atts">
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
              </strow>
              <strow
                conref="../common/commonLRdefs.dita#commonLRdefs/classandout">
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
              </strow>
            </simpletable>
          </section>
        </refbody>
      </reference>
      <reference
        id="mathmlref">
        <title>svgref</title>
        <shortdesc>Refers to a non-DITA XML document containing SVG markup in
          order to use the markup by reference. </shortdesc>
        <refbody>
          <section>
            <p>The reference <keyword>must</keyword> be to an SVG &lt;svg>
              element. The reference <keyword>may</keyword> be a URI that
              addresses an XML document whose root element is an SVG &lt;svg>
              element or a URI that addresses an XML document and a fragment
              identifier that is the XML ID of an &lt;svg> element within the
              document. </p>
            <note>To reuse SVG markup stored within a DITA topic, use a normal
              content reference from the &lt;svg_container> element.</note>
            <p>The SVG should be processed and rendered as though the &lt;svg>
              element had occurred directly in the content of the containing
              &lt;svg_container> element.</p>
            <p>The reference may be direct, via the @href attribute, or
              indirect, via the @keyref attribute. </p>
            <p>For key references, only the key name should be specified. Any
              fragment identifier for specifying the ID of the &lt;svg> element
              to use must be specified as part of the key definition's @href
              value.</p>
            <note
              othertype="Example"
              type="other">
              <p>To refer to the &lt;svg> element with the @id value "svg-fragment-02" within a larger document using a key reference, you would define the key like
                so:<codeblock>&lt;keydef 
  keys="svg-fragment-0002" 
  href="svg/svg-library.xml#svg-fragment-02"
  format="svg"
/></codeblock>You would refer to this key using just the key
                name:<codeblock>&lt;svg_container>
  &lt;svgref keyref="svg-fragment-0002"/>
&lt;/svg_container></codeblock></p>
            </note>
          </section>
          <section>
            <title>Inheritance</title>
            <p>+ topic/xref svg-d/svgref </p>
          </section>
          <section>
            <title>Example</title>
            <p>A reference to an &lt;svg> element that is the root element of
              its containing document:</p>
            <codeblock>&lt;fig>
  &lt;title>Figure With SVG Container&lt;/title>
  &lt;svg_container>
    &lt;svgref 
       href="media/svg/svg-graphic-01.xml" 
       format="svg"
    />
  &lt;/svg_container>
&lt;/fig></codeblock>
            <p><filepath>svg-graphic-01.xml</filepath> (note that the &lt;svg>
              element sets the SVG namespace as the default namespace, so there
              are no namespace prefixes on the SVG
              markup):<codeblock>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;svg xmlns="http://www.w3.org/2000/svg"
  width="100"
  height="100">
  &lt;defs>
    &lt;filter
      id="f1"
      x="0"
      y="0">
      &lt;feGaussianBlur
        in="SourceGraphic"
        stdDeviation="15"/>
    &lt;/filter>
  &lt;/defs>
  &lt;rect
    width="90"
    height="90"
    stroke="green"
    stroke-width="3"
    fill="yellow"
    filter="url(#f1)"/>
&lt;/svg></codeblock></p>
            <p>A reference to an &lt;svg> element by ID:</p>
            <codeblock>&lt;fig>
  &lt;title>Figure With SVG Container&lt;/title>
  &lt;svg_container>
    &lt;svgref 
      href="media/svg/svg-library.xml#frag-0001" 
    />
  &lt;/svg_container>
&lt;/fig></codeblock>
            <p><filepath>svg-library.xml</filepath>:<codeblock>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;root>
  &lt;part>
   &lt;svg id="frag-0001"
     xmlns="http://www.w3.org/2000/svg"
     width="100"
     height="100">
     &lt;defs>
        &lt;filter
          id="f1"
          x="0"
          y="0">
          &lt;feGaussianBlur
            in="SourceGraphic"
            stdDeviation="15"/>
        &lt;/filter>
      &lt;/defs>
      &lt;rect
        width="90"
        height="90"
        stroke="green"
        stroke-width="3"
        fill="yellow"
        filter="url(#f1)"/>
    &lt;/svg>
    &lt;svg id="frag-0002"
       width="4in" height="6in" version="1.1"
          >
          &lt;circle cx="150" cy="200" r="100" fill="url(#grad_blue)" >
            &lt;animate attributeName="r" begin="Go.click" end="Stop.click" dur="4s"  
              values="100; 0; 100" repeatCount="indefinite"/>
          &lt;/circle>
          &lt;radialGradient id="grad_blue" cx="20%" cy="20%" r="100%" fx="30%" fy="30%">
            &lt;stop stop-color="white" offset="0"/>
            &lt;stop stop-color="blue" offset="25%"/>
            &lt;stop stop-color="rgb(0,0,192)" offset="50%"/>
            &lt;stop stop-color="rgb(0,0,127)" offset="70%"/>
            &lt;stop stop-color="rgb(0,0,64)" offset="85%"/>
            &lt;stop stop-color="rgb(0,0,0)" offset="100%"/>
          &lt;/radialGradient>
          &lt;g id="Go">
            &lt;rect x="70" y="320" height="40" width="80" fill="aqua"/>
            &lt;text x="90" y="350" font-size="30" fill="green">Go &lt;/text>
          &lt;/g>
          &lt;g id="Stop">
            &lt;rect x="160" y="320" height="40" width="80" fill="aqua"/>
            &lt;text x="170" y="350" font-size="30" fill="red">Stop&lt;/text>
          &lt;/g>
        &lt;/svg>
  &lt;/part>
&lt;/root></codeblock></p>
          </section>
          <section
            id="attributes">
            <title>Attributes</title>
            <simpletable
              id="attribute_table"
              relcolwidth="2* 3* 1* 1* 1*">
              <sthead>
                <stentry>Name</stentry>
                <stentry>Description</stentry>
                <stentry>Data Type</stentry>
                <stentry>Default Value</stentry>
                <stentry>Required?</stentry>
              </sthead>
              <strow>
                <stentry>href</stentry>
                <stentry>Reference to the &lt;svg> element to be used. If the &lt;svg> element is the root element of the referenced resource, then no fragment identifier is required, otherwise, a
                  fragment identifier must be specified, where the fragment identifier is the XML ID of the &lt;svg> element to be used.</stentry>
                <stentry>CDATA</stentry>
                <stentry>#IMPLIED</stentry>
                <stentry>Must be specified if @keyref is not specified.</stentry>
                <stentry/>
                <stentry/>
              </strow>
              <strow
                conref="../common/commonLRdefs.dita#commonLRdefs/type">
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
              </strow>
              <strow>
                <stentry>format</stentry>
                <stentry>The data format of the resource.</stentry>
                <stentry>CDATA</stentry>
                <stentry>svg</stentry>
                <stentry>No</stentry>
              </strow>              
              <strow
                conref="../common/commonLRdefs.dita#commonLRdefs/univ-atts">
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
              </strow>
              <strow
                conref="../common/commonLRdefs.dita#commonLRdefs/global-atts">
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
              </strow>
              <strow
                conref="../common/commonLRdefs.dita#commonLRdefs/classoutkey">
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
                <stentry/>
              </strow>
            </simpletable>
          </section>
        </refbody>
      </reference>
      <?Pub Caret1?>
    </reference>
  </topic>
</dita>
