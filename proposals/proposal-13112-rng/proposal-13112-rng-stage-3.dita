<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
  <topic id="topic_aqh_5zt_3h">
    <title>Stage 3 proposal: 13112, RelaxNG For Vocabulary</title>
    <shortdesc>Defines the coding requirements for RelaxNG DITA vocabulary and constraint modules and document type shells.</shortdesc>
    <body>
      <section>
        <title>Champion</title>
        <p>Champions: Eliot Kimber, Robert Anderson, Michael Priestly</p>
      </section>
      <section>
        <title>Tracking information</title>
        <simpletable frame="all" relcolwidth="1.0* 1.0* 1.0*">
          <sthead>
            <stentry>Event</stentry>
            <stentry>Date</stentry>
            <stentry>Links</stentry>
          </sthead>
          <strow>
            <stentry>Stage 1 proposal accepted</stentry>
            <stentry/>
            <stentry>Include link to meeting minutes</stentry>
          </strow>
          <strow>
            <stentry>Stage 2 proposal submitted</stentry>
            <stentry/>
            <stentry>Include links to DITA and HTML versions</stentry>
          </strow>
          <strow>
            <stentry>Stage 2 proposal discussed</stentry>
            <stentry/>
            <stentry>Include link to meeting minutes</stentry>
          </strow>
          <strow>
            <stentry>Stage 2 proposal approved</stentry>
            <stentry/>
            <stentry>Include link to meeting minutes</stentry>
          </strow>
          <strow>
            <stentry>Stage 3 proposal submitted to reviewers</stentry>
            <stentry/>
            <stentry>Include names of reviewers</stentry>
          </strow>
          <strow>
            <stentry>Stage 3 proposal (this document) submitted</stentry>
            <stentry/>
            <stentry/>
          </strow>
        </simpletable>
      </section>
      <section>
        <title>Approved technical requirements</title>
        <p>The requirement is to use RelaxNG as a recognized and codified schema language for DITA vocabulary and constraint definitions. As a schema syntax, RelaxNG offers a number of significant
          advantages over both DTD and XSD, advantages that make RelaxNG ideally suited to DITA's modular vocabulary architecture. The syntax features of RelaxNG make defining vocabulary modules and
          the document shells that use them about as easy as it can be, avoiding both the syntactic complexity and unfamiliarity of DTDs and the verbosity of XSD along with XSD's challenges with the
          redefine feature. </p>
        <p>An additional requirement is to use RelaxNG as the master form for all vocabulary definitions from which all other schema formats can be generated, reducing the effort required to maintain
          multiple forms of DITA modules and document type shells. In short, the requirement is "let the creators and maintainers of DITA modules and shells use the best available tools for the task." </p>
        <p>Any schema language used for DITA vocabulary must support defaulted attributes and must support the integration and configuration of vocabulary and constraint modules into working document
          type shells.</p>
      </section>
      <section>
        <title>Dependencies or interrelated proposals</title>
        <p>Is not dependent on any other proposals. </p>
      </section>
      <section>
        <title>Modified DTDs</title>
        <p>New topic type, vocabularyModuleDesc, which is used within DITA RNG modules. This topic type is a specialization of &lt;topic>. It is required specifically to provide RNG module metadata
          required to enable generation of other syntax forms of the module. It is not intended for use outside of this context. For that reason, it should not be considered part of the main
          TC-defined DITA vocabulary, but part of the RNG facility. The markup is documented as part of the RNG facility (see <xref
          href="#concept_lbt_ct4_2m"
          format="dita"/>).</p>
        <p>Vocabulary module description topic type:</p>
        <codeblock><coderef href="org.oasis-open.dita.relaxng/doctypes/rng/rng/vocabularyModuleDescMod.rng"/></codeblock>
        <p>Vocabulary module topic document type shell:</p>
        <codeblock><coderef href="org.oasis-open.dita.relaxng/doctypes/rng/rng/vocabularyModuleDesc.rng"/></codeblock>
      </section>
      <section>
        <title>Modified specification documentation</title>
        <table
          frame="all"
          id="table_zzc_j4w_4k">
          <title>Modified Topics</title>
          <tgroup
            cols="4">
            <colspec
              colname="c1"
              colnum="1"
              colwidth="1.98*"/>
            <colspec
              colname="c2"
              colnum="2"
              colwidth="1.06*"/>
            <colspec
              colname="c3"
              colnum="3"
              colwidth="1*"/>
            <colspec
              colname="newCol4"
              colnum="4"
              colwidth="1.03*"/>
            <thead>
              <row>
                <entry>Topic to Be Modified</entry>
                <entry>DITA 1.2 Text</entry>
                <entry
                  namest="c3"
                  nameend="newCol4">Proposed 1.3 Text</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>archSpec/base/dita-terminology.dita</entry>
                <entry>
                  <dl>
                    <dlentry>
                      <dt>DITA document-type shell</dt>
                      <dd>A set of DTD or XSD declarations that implement a DITA document type... </dd>
                    </dlentry>
                  </dl>
                </entry>
                <entry
                  namest="c3"
                  nameend="newCol4">
                  <dl>
                    <dlentry>
                      <dt>DITA document-type shell</dt>
                      <dd>A set of DTD, XSD, or RelaxNG declarations that implement a DITA document type... </dd>
                    </dlentry>
                  </dl>
                </entry>
              </row>
              <row>
                <entry
                  morerows="1">archSpec/base/fileext.dita</entry>
                <entry>
                  <dl>
                    <dlentry>
                      <dt>Document-type shell files</dt>
                      <dd>
                        <ul
                          id="ul_3298f6ba-c3a1-419b-88e5-104eb24fe903">
                          <li><varname>typename</varname>.dtd</li>
                          <li><varname>typename</varname>.xsd</li>
                        </ul>
                      </dd>
                    </dlentry>
                  </dl>
                </entry>
                <entry
                  namest="c3"
                  nameend="newCol4">
                  <dl>
                    <dlentry>
                      <dt>Document-type shell files</dt>
                      <dd>
                        <ul
                          id="ul_l52_zzd_2m">
                          <li><varname>typename</varname>.dtd</li>
                          <li><varname>typename</varname>.xsd</li>
                          <li><varname>typename</varname>.rnc</li>
                          <li><varname>typename</varname>.rng</li>
                        </ul>
                      </dd>
                    </dlentry>
                  </dl>
                </entry>
              </row>
              <row>
                <entry>Add to end of definition list</entry>
                <entry
                  namest="c3"
                  nameend="newCol4">
                  <dl>
                    <dlentry>
                      <dt>RelaxNG structural module files</dt>
                      <dd>
                        <ul
                          id="ul_eefc504e-3109-4ab5-bbe9-91221b4ecf74">
                          <li><varname>typename</varname>Mod.rnc</li>
                          <li><varname>typename</varname>Mod.rng</li>
                        </ul>
                      </dd>
                    </dlentry>
                    <dlentry>
                      <dt>RelaxNG domain module files</dt>
                      <dd>
                        <ul
                          id="ul_odj_k12_2m">
                          <li><varname>typename</varname>Domain.rnc</li>
                          <li><varname>typename</varname>Domain.rng</li>
                        </ul>
                      </dd>
                    </dlentry>
                    <dlentry>
                      <dt>RelaxNG constraint module files</dt>
                      <dd>
                        <ul
                          id="ul_49a2afe7-c7d2-4c8f-967e-97c6c8ef207d">
                          <li><varname>constraintname</varname>ConstraintMod.rnc</li>
                          <li><varname>constraintname</varname>ConstraintMod.rng</li>
                        </ul>
                      </dd>
                    </dlentry>
                  </dl>
                </entry>
              </row>
              <row>
                <entry>archSpec/base/recognizedconstraintmechanisms.dita</entry>
                <entry>
                  <p>The DITA standard currently recognizes two XML document grammar mechanisms by which conforming DITA vocabulary modules and document types may be constructed: document type
                    declarations (DTDs) and XML Schema declarations (XSDs).</p>
                  <p>This specification defines implementation requirements for both of these document constraint mechanisms. The OASIS DITA Technical Committee recognizes that other XML grammar
                    languages might provide similar modularity and extensibility mechanisms. However, the Technical Committee has not yet defined implementation requirements for those languages so
                    their conformance cannot be determined.</p>
                </entry>
                <entry
                  namest="c3"
                  nameend="newCol4">
                  <p>The DITA standard currently recognizes <ph
                    rev="1.3">three</ph> XML document grammar mechanisms by which conforming DITA vocabulary modules and document types may be constructed: document type declarations (DTDs), XML
                    Schema declarations (XSDs)<ph
                    rev="1.3">, and RelaxNG grammars.</ph></p>
                  <p>This specification defines implementation requirements for <ph
                    rev="1.3">all</ph> of these document constraint mechanisms. The OASIS DITA Technical Committee recognizes that other XML grammar languages might provide similar modularity and
                    extensibility mechanisms. However, the Technical Committee has not yet defined implementation requirements for those languages so their conformance cannot be determined.</p>
                </entry>
              </row>
              <row>
                <entry>New topic, generation of DTD and XSD schemas from RelaxNG</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">Insert as second child of archSpec/base/ditaspecialization.dita. See <xref
                  href="#concept_j3g_vm4_2m"
                  format="dita"/></entry>
              </row>
              <row>
                <entry
                  morerows="1">archSpec/base/createCustomDocType.dita</entry>
                <entry>Thus, DITA <term>does not</term> require that conforming DITA documents have an associated DTD, XSD, or other formal document type definition as long as all required
                  attributes are explicit in document instances. However, most DITA documents have an associated DTD or XML schema document by which the documents can be validated using normal XML
                  processors and that can provide default values for the @domains and @class attributes, in particular. In addition, while the DITA specification only defines coding requirements for
                  DTDs and XML schema documents, conforming DITA documents <term>may</term> use other document type constraint languages, such as RelaxNG or Schematron.</entry>
                <entry
                  namest="c3"
                  nameend="newCol4">Thus, DITA <term>does not</term> require that conforming DITA documents have an associated DTD, XSD, <ph>RelaxNG, </ph>or other formal document type
                  definition as long as all required attributes are explicit in document instances. However, most DITA documents have an associated DTD<ph
                  rev="1.3">, RelaxNG grammar, or </ph>XML schema document by which the documents can be validated using normal XML processors and that can provide default values for the @domains and
                  @class attributes, in particular. In addition, while the DITA specification only defines coding requirements for DTDs<ph
                  rev="1.3">, RelaxNG grammars, </ph>andXML schema documents, conforming DITA documents <term>may</term> use other document type constraint languages, such as Schematron.</entry>
              </row>
              <row>
                <entry>For example, a shell document type that is an unmodified copy of the OASIS-provided topic document type shell (topic.dtd or topic.xsd) </entry>
                <entry
                  namest="c3"
                  nameend="newCol4">For example, a shell document type that is an unmodified copy of the OASIS-provided topic document type shell (<ph
                  rev="1.3">topic.rng, topic.rnc, topic.dtd,</ph> or topic.xsd)</entry>
              </row>
              <row>
                <entry>New topic</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">RelaxNG document-type shell: Coding requirements (see <xref
                  href="#concept_ecb_wg2_2m"
                  format="dita"/>).</entry>
              </row>
              <row>
                <entry>archSpec/base/classatt.dita</entry>
                <entry>When the @class attribute is declared in a DTD or XSD</entry>
                <entry
                  namest="c3"
                  nameend="newCol4">When the @class attribute is declared in a <ph
                  rev="1.3">DTD, XSD, or RelaxNG grammar,</ph></entry>
              </row>
              <row>
                <entry>archSpec/base/foreigncontentspec.dita</entry>
                <entry>New example</entry>
                <entry
                  namest="c3"
                  nameend="newCol4">Add new example of RelaxNG foreign specialization (see <xref
                  href="#concept_aqh_5zt_3h"
                  format="dita"/>).</entry>
              </row>
              <row>
                <entry>New topic</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">RelaxNG grammar specialization module coding requirements (see <xref
                  href="#concept_sbf_fn4_2m"
                  format="dita"/>)</entry>
              </row>
              <row>
                <entry>New topic</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">Constraint module RelaxNG coding requirements (see <xref
                  href="#concept_ebs_mn4_2m"
                  format="dita"/>)</entry>
              </row>
              <row>
                <entry
                  namest="c1"
                  nameend="newCol4">For the Technical Content section, all the topics have trailing "Modules" sections that must be updated to reflect the RelaxNG modules. I have not bothered to show
                  the original except for Concept, which establishes the pattern.</entry>
              </row>
              <row>
                <entry>archSpec/technicalContent/dita_concept_topic.dita</entry>
                <entry>In section titled "Modules":<p>The following DITA modules are provided for the concept topic:</p><sl>
                  <sli>concept.mod, concept.ent (DTD)</sli>
                  <sli>conceptMod.xsd, conceptGrp.xsd (Schema)</sli>
                  </sl></entry>
                <entry
                  namest="c3"
                  nameend="newCol4">
                  <p>The following DITA modules are provided for the concept topic:</p>
                  <sl>
                    <sli>concept.mod, concept.ent (DTD),</sli>
                    <sli>conceptMod.xsd, conceptGrp.xsd (Schema), conceptMod.rnc (RelaxNG compact syntax), conceptMod.rng (RelaxNG XML syntax)</sli>
                  </sl>
                </entry>
              </row>
              <row>
                <entry>archSpec/technicalContent/dita_reference_topic.dita</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">
                  <sl>
                    <sli>reference.mod, reference.ent (DTD), </sli>
                    <sli><ph
                      rev="1.3">referenceMod.rnc (RelaxNG compact syntax)</ph></sli>
                    <sli><ph
                      rev="1.3">referenceMod.rng (RelaxNG XML syntax)</ph></sli>
                    <sli>referenceMod.xsd, referenceGrp.xsd (Schema)</sli>
                  </sl>
                </entry>
              </row>
              <row>
                <entry>archSpec/technicalContent/dita_generic_task_topic.dita</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">
                  <sl>
                    <sli>task.mod, task.ent(DTD), </sli>
                    <sli><ph
                      rev="1.3">taskMod.rnc (RelaxNG compact syntax)</ph></sli>
                    <sli><ph
                      rev="1.3">taskMod.rng (RelaxNG XML syntax)</ph></sli>
                    <sli>taskMod.xsd, taskGrp.xsd (Schema)</sli>
                  </sl>
                </entry>
              </row>
              <row>
                <entry>archSpec/technicalContent/dita_task_topic.dita</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">
                  <sl>
                    <sli>task.mod. task.ent, strictTaskbody constraint (DTD)</sli>
                    <sli><ph
                      rev="1.3">taskMod.rnc, strictTaskBodyConstraint.rnc (RelaxNG compact syntax)</ph></sli>
                    <sli><ph
                      rev="1.3">taskMod.rng, strictTaskBodyConstraint.rng (RelaxNG XML syntax)</ph></sli>
                    <sli>taskMod.xsd, taskGrp.xsd, strictTaskbodyConstraintMod.xsd (Schema)</sli>
                  </sl>
                </entry>
              </row>
              <row>
                <entry>archSpec/technicalContent/dita_machinerytask_topic.dita</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">
                  <sl>
                    <sli>machineryTask.dtd (DTD), machineryTaskbodyConstraint.mod</sli>
                    <sli>machineryTask.rnc, machineryTaskbodyConstraint.rnc (RelaxNG compact syntax)</sli>
                    <sli>machineryTask.rng, machineryTaskbodyConstraint.rng (RelaxNG XML syntax)</sli>
                    <sli> machineryTask.xsd, machineryTaskbodyConstraintMod.xsd, machineryTaskbodyConstraintIntMod.xsd (Schema)</sli>
                  </sl>
                </entry>
              </row>
              <row>
                <entry>archSpec/technicalContent/dita_glossary_topic.dita</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">
                  <sl>
                    <sli>glossentry.dtd, glossentry.ent, glossentry.mod (DTD)</sli>
                    <sli>glossentry.rnc, glossentryMod.rnc (RelaxNG compact syntax)</sli>
                    <sli>glossentry.rng, glossentryMod.rng (RelaxNG XML syntax)</sli>
                    <sli>glossentryMod.xsd, glossentryGrp.xsd (Schema)</sli>
                  </sl>
                </entry>
              </row>
              <row>
                <entry>archSpec/technicalContent/dita_glossarygroup_topic.dita</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">
                  <sl>
                    <sli>glossgroup.dtd, glossgroup.ent, glossgroup.mod (DTD) </sli>
                    <sli>glossgroup.rnc, glossgroupMod.rnc (RelaxNG compact syntax)</sli>
                    <sli>glossgroup.rng, glossgroupMod.rng (RelaxNG XML syntax)</sli>
                    <sli>glossgroup.xsd, (Schema)</sli>
                  </sl>
                </entry>
              </row>
              <row>
                <entry>archSpec/technicalContent/dita_spec_intro_bookmap.dita</entry>
                <entry/>
                <entry
                  namest="c3"
                  nameend="newCol4">
                  <sl>
                    <sli>bookmap.dtd, bookmap.ent, <?Pub Caret?>bookmap.mod (DTD)</sli>
                    <sli>bookmap.rnc, bookmapMod.rnc (RelaxNG compact syntax)</sli>
                    <sli>bookmap.rng, bookmapMod.rng (RelaxNG XML syntax)</sli>
                    <sli>bookmap.xsd, bookmapGrp.xsd, bookmapMod.xsd (Schema)</sli>
                  </sl>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </body>
    <concept
      id="concept_j3g_vm4_2m">
      <title>Generating DTD and XSD Schemas from RelaxNG</title>
      <shortdesc>RelaxNG XML syntax document type shells and modules may be used to generate DTD- and XSD-syntax document type shells and modules that conform to the DITA coding requirements when the
        RelaxNG grammar document contains DITA-specific metadata that defines the module type, module header comment, and public identifiers for the components to be generated. All RelaxNG grammars
        defined by the DITA standard include this metadata.</shortdesc>
      <conbody>
        <p>Of the three DITA-recognized document constraint languages, RelaxNG provides the simplest syntax for specifying the integration of vocabulary and constraint modules into document type
          shells. This makes RelaxNG ideally suited as the base format for defining DITA vocabulary. However, many, if not most DITA-aware tools require the use of DTDs or XSD schemas as of version
          1.3 of the DITA specification. Thus there is a practical requirement to generate DTDs and XSD schemas from RelaxNG.</p>
        <p>The generation of DTD and XSD modules requires additional metadata that is not inherent in the grammar definition:<ul
          id="ul_vfp_sp4_2m">
          <li>The module type (document type shell, vocabulary module, or constraint module)</li>
          <li>The header comment for the file</li>
          <li>The module short name for vocabulary and constraint modules</li>
          <li>The public identifiers to use for each component file to be generated</li>
          </ul></p>
        <p>This metadata can be defined using the &lt;moduleDesc> element within a RelaxNG &lt;grammar> element.</p>
      </conbody>
      <concept
        id="concept_lbt_ct4_2m">
        <title>Module Description Markup for use in DITA-specific RelaxNG grammars</title>
        <shortdesc>The &lt;moduleDesc> element enables specification of the metadata required in order to generate from RelaxNG grammars DTD and XSD components that conform to the DITA coding
          requirements.</shortdesc>
        <conbody>
          <p>When it is used, the &lt;moduleDesc> element <term
            outputclass="OASIS-terminology">must</term> be specified as a child of the RelaxNG &lt;grammar> element and <term
            outputclass="OASIS-terminology">should</term> be the first child of &lt;grammar>. The &lt;moduleDesc> element functions as a foreign element as defined in the RelaxNG standard. As a
            foreign element, it must be in a namespace that is different from any RelaxNG namespaces. The &lt;moduleDesc> element is defined as a specialization of &lt;topic>. Because it must be in a
            namespace, it cannot be a strictly-conforming DITA topic as DITA elements may not be in a namespace. However, if the &lt;moduleDesc> element is processed in terms of the @class attributes
            it will be recognized as a DITA topic and otherwise conforms to all rules for conforming topic specializations.</p>
          <p>The &lt;moduleDesc> element type is defined in the vocabulary module file <filepath>vocabularyModuleDescMod.rng</filepath>.</p>
          <section>
            <title>Namespace</title>
            <p>The &lt;moduleDesc> element is in the DITA architecture namespace, "<ph
              outputclass="xmlnsname">http://dita.oasis-open.org/architecture/2005/</ph>"</p>
          </section>
          <section>
            <title>&lt;moduleDesc> element type</title>
            <dl>
              <dlentry>
                <dt>&lt;moduleDesc></dt>
                <dd>Contains the module description metadata. Subelements:<dl>
                  <dlentry>
                    <dt>&lt;moduleTitle></dt>
                    <dd>Provides a descriptive title for the module or document type shell. Content is text.</dd>
                  </dlentry>
                  <dlentry>
                    <dt>&lt;headerComment></dt>
                    <dd>Contains the header comment for the module. The content is text with whitespace preserved (@xml:space value of "preserve"). The header comment is used as the header for all
                      generated components.</dd>
                  </dlentry>
                  <dlentry>
                    <dt>&lt;moduleMetadata></dt>
                    <dd>Contains additional metadata for the module or document type shell. Subelements:<dl>
                      <dlentry>
                        <dt>&lt;moduleType></dt>
                        <dd>Indicates the module type. Content is one of the following keywords:<dl>
                          <dlentry>
                            <dt>attributedomain</dt>
                            <dd>The grammar defines an attribute domain</dd>
                          </dlentry>
                          <dlentry>
                            <dt>base</dt>
                            <dd>The grammar is one of the DITA base modules. Base modules may only be defined by the DITA Technical Committee.</dd>
                          </dlentry>
                          <dlentry>
                            <dt>constraint</dt>
                            <dd>The grammar defines a constraint module.</dd>
                          </dlentry>
                          <dlentry>
                            <dt>elementdomain</dt>
                            <dd>The grammar defines an element domain.</dd>
                          </dlentry>
                          <dlentry>
                            <dt>map</dt>
                            <dd>The grammar defines a map type.</dd>
                          </dlentry>
                          <dlentry>
                            <dt>mapshell</dt>
                            <dd>The grammar is a document type shell for a map type.</dd>
                          </dlentry>
                          <dlentry>
                            <dt>topic</dt>
                            <dd>The grammar defines a topic type.</dd>
                          </dlentry>
                          <dlentry>
                            <dt>topicshell</dt>
                            <dd>The grammar is a document type shell for a topic type.</dd>
                          </dlentry>
                          </dl></dd>
                      </dlentry>
                      <dlentry>
                        <dt>&lt;modulePublicIds></dt>
                        <dd>For vocabulary and constraint modules, defines the public IDs for files generated from the grammar. Each subelement specifies the public identifier to use for a specific
                          generated file. Subelements:<dl>
                          <dlentry>
                            <dt>&lt;dtdMod></dt>
                            <dd>The public identifier for the DTD-syntax .mod file to be generated from the grammar.</dd>
                          </dlentry>
                          <dlentry>
                            <dt>&lt;dtdEnt></dt>
                            <dd>The public identifier for the DTD-syntax .ent file to be generated from the grammar. Required for element domain modules, not used for attribute domain modules.</dd>
                          </dlentry>
                          <dlentry>
                            <dt>&lt;rncMod></dt>
                            <dd>The public identifier for the RelaxNG compact syntax (RNC) module file to be generated from the grammar.</dd>
                          </dlentry>
                          <dlentry>
                            <dt>&lt;rngMod></dt>
                            <dd>The public identifier for the RelaxNG XML syntax (RNG) module file (the file that contains the &lt;moduleMetadata> element).</dd>
                          </dlentry>
                          <dlentry>
                            <dt>&lt;xsdMod></dt>
                            <dd>The public identifier for the XSD schema module file to be generated from the grammar.</dd>
                          </dlentry>
                          </dl></dd>
                      </dlentry>
                      <dlentry>
                        <dt>&lt;shellPublicIds></dt>
                        <dd>For document type shells, defines the public IDs for files generated from the grammar. Each subelement specifies the public identifier to use for a specific generated file. Subelements:<dl>
                          <dlentry>
                            <dt>&lt;dtdShell></dt>
                            <dd>The public identifier for the DTD document type shell to be generated from the grammar.</dd>
                          </dlentry>
                          <dlentry>
                            <dt>&lt;rncShell></dt>
                            <dd>The public identifier for the RelaxNG compact syntax (RNC) document type shell to be generated from the grammar.</dd>
                          </dlentry>
                          <dlentry>
                            <dt>&lt;rngShell></dt>
                            <dd>The public identifier for the RNG document type shell (the file that contains the &lt;moduleMetadata> element)</dd>
                          </dlentry>
                          <dlentry>
                            <dt>&lt;xsdShell></dt>
                            <dd>The public identifier for the XSD schema document type shell to be generated from the grammar.</dd>
                          </dlentry>
                          </dl></dd>
                      </dlentry>
                      </dl></dd>
                  </dlentry>
                  </dl></dd>
              </dlentry>
            </dl>
          </section>
          <example>
            <title>Example RelaxNG grammars with module metadata</title>
            <p>A typical vocabulary module, in this case, a topic
              type:<codeblock>&lt;grammar xmlns:dita="http://dita.oasis-open.org/architecture/2005/"
  xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" 
  xmlns="http://relaxng.org/ns/structure/1.0" 
  datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
  >
 &lt;moduleDesc xmlns="http://dita.oasis-open.org/architecture/2005/">
   &lt;moduleTitle>DITA Module Description Module&lt;/moduleTitle>
   &lt;headerComment>&lt;![CDATA[
============================================================= 
                    HEADER                                     
 ============================================================= 
  MODULE:    DITA Module Description                             
  VERSION:   1.3                                               
  DATE:      September 2013                                     

  ...
]]&gt;&lt;/headerComment>
   &lt;moduleMetadata>
     &lt;moduleType>topic&lt;/moduleType>
     &lt;moduleShortName>vocabularyModule&lt;/moduleShortName>
     &lt;modulePublicIds>
       &lt;dtdMod>-//OASIS//ELEMENTS DITA Vocabulary Module Description//EN&lt;/dtdMod>
       &lt;dtdEnt>-//OASIS//ENTITIES DITA Vocabulary Module Description//EN&lt;/dtdEnt>
       &lt;xsdMod>urn:oasis:names:tc:dita:xsd:vocabularyModuleDescMod.xsd&lt;/xsdMod>
       &lt;rncMod>urn:oasis:names:tc:dita:rnc:vocabularyModuleDescMod.rnc&lt;/rncMod>
       &lt;rngMod>urn:oasis:names:tc:dita:rng:vocabularyModuleDescMod.rng&lt;/rngMod>
     &lt;/modulePublicIds>
   &lt;/moduleMetadata>
 &lt;/moduleDesc>
 
 ...

&lt;/grammar></codeblock></p>
            <p>A typical document type shell, in this case, a topic
              type:<codeblock>&lt;grammar xmlns:dita="http://dita.oasis-open.org/architecture/2005/"
  xmlns="http://relaxng.org/ns/structure/1.0"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
  datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  &lt;moduleDesc xmlns="http://dita.oasis-open.org/architecture/2005/">
   &lt;moduleTitle>DITA Module Description Module&lt;/moduleTitle>
   &lt;headerComment>&lt;![CDATA[
============================================================= 
                    HEADER                                     
 ============================================================= 
  MODULE:    DITA Module Description Topic Type Shell                           
  VERSION:   1.3                                               
  DATE:      September 2013                                     

  ...

]]&gt;&lt;/headerComment>
   &lt;moduleMetadata>
     &lt;moduleType>topicshell&lt;/moduleType>
     &lt;moduleShortName>vocabularyModule&lt;/moduleShortName>
     &lt;shellPublicIds>
       &lt;dtdShell>-//OASIS//DTD DITA Vocabulary Module Description//EN&lt;/dtdShell>
       &lt;xsdShell>urn:oasis:names:tc:dita:xsd:vocabularyModuleDesc.xsd&lt;/xsdShell>
       &lt;rncShell>urn:oasis:names:tc:dita:rnc:vocabularyModuleDesc.rnc&lt;/rncShell>
       &lt;rngShell>urn:oasis:names:tc:dita:rng:vocabularyModuleDesc.rng&lt;/rngShell>
     &lt;/shellPublicIds>
   &lt;/moduleMetadata>
 &lt;/moduleDesc>

 ...

&lt;/grammar></codeblock></p>
          </example>
        </conbody>
      </concept>
    </concept>
    <concept
      id="concept_ecb_wg2_2m">
      <title>RelaxNG document-type shell: Coding requirements</title>
      <shortdesc>A document type shell integrates one or more topic type or map type modules, zero or more domain modules, and zero or more constraint modules. A RelaxNG document type shell is
        organized into sections, where each section contains a specific type of declaration.</shortdesc>
      <conbody>
        <p>RelaxNG document type shells <term
          outputclass="OASIS-terminology">may not</term> directly declare element types or attributes. A RelaxNG document type shell <term
          outputclass="OASIS-terminology">must</term> conform to the following coding requirements.</p>
        <p>RelaxNG modules are self-integrating such that document type shells need only include vocabulary modules, there is no separate specification required to integrate domain and nested topic
          elements into base content models. Likewise, constraint modules simply override the patterns they constraint directly in the constraint module itself.</p>
        <p>Constraint modules are used by importing the constraint module rather than the module the constraint modifies. Constraint modules refer to the base module to be constrained and redefine
          patterns as needed to implement the constraint. In addition, you can disallow base types extended by domains by overriding the base type's pattern in the document type shell within the
          reference to the domain module or constraint module for the domain. In this case, you <term
          outputclass="OASIS-terminology">must</term> declare the constraint represented by the pattern redefinition in the @domains attribute. </p>
        <p>Each section of the shell is introduced by a comment. Shells <term
          outputclass="OASIS-terminology">should</term> use these comments to identify each section of the shell. Each section <term
          outputclass="OASIS-terminology">should</term> be present in the shell grammar, even if the section contains no declarations, and <term
          outputclass="OASIS-terminology">should</term> occur in the order they are presented here. Shells <term
          outputclass="OASIS-terminology">should</term> have an initial set of comments or a &lt;moduleMetadata> element that describes the shell and indicates the URNs or absolute URLs by which the
          shell should be referenced in RelaxNG grammar references (see <xref
          href="#concept_lbt_ct4_2m"
          format="dita"/>).</p>
        <dl>
          <dlentry>
            <dt>Root element declaration</dt>
            <dd>
              <p>Document type shells <term
                outputclass="OASIS-terminology">must</term> use the RelaxNG start declaration to specify the allowed root element defined by the document type, either the root topic type or root map
                type defined by the document type shell. The start declaration <term
                outputclass="OASIS-terminology">must</term> specify exactly one allowed root element as a reference the <codeph><i>tagname</i>.element</codeph> pattern for the root element.</p>
              <p>For example:</p>
              <codeblock>&lt;!-- ============================================================= -->
&lt;!--                 ROOT ELEMENT DECLARATION                      -->
&lt;!-- ============================================================= -->
  &lt;start combine="choice">
    &lt;ref name="topic.element"/>
  &lt;/start></codeblock>
            </dd>
          </dlentry>
          <dlentry>
            <dt>Module inclusions</dt>
            <dd>
              <p>The document type shell must include at least the module for the map or topic type the shell is configuring. The module inclusion section must start with the
                comment:<codeblock>&lt;!-- ============================================================= -->
&lt;!--                 MODULE INCLUSIONS                             -->
&lt;!-- ============================================================= --></codeblock></p>
              <p>For example:</p>
              <codeblock>&lt;!-- ============================================================= -->
&lt;!--                 MODULE INCLUSIONS                             -->
&lt;!-- ============================================================= -->
  &lt;include href="topicMod.rng"/>
  &lt;include href="highlightDomainMod.rng"/>
  &lt;include href="utilitiesDomainMod.rng"/>
  &lt;include href="indexingDomainMod.rng"/>
  &lt;include href="hazardstatementDomainMod.rng"/></codeblock>
            </dd>
          </dlentry>
          <dlentry>
            <dt>ID-defining-elements override</dt>
            <dd>
              <p>In order to support patterns for elements that declare the @id attribute directly, rather than through the universal attributes or ID attributes patterns (pattern "univ-atts" or
                pattern "id-atts"), the document type shell grammar must define a pattern named "any" that configures the attribute list pattern for those elements. The general structure of this
                pattern
                is:<codeblock>&lt;define name="any">
    &lt;zeroOrMore>
      &lt;choice>
        &lt;ref name="<varname>tagname</varname>.element"/>
        &lt;element>
          &lt;anyName>
            &lt;except>
              &lt;name><varname>tagname</varname>&lt;/name>
            &lt;/except>
          &lt;/anyName>
          &lt;zeroOrMore>
            &lt;attribute>
              &lt;anyName/>
            &lt;/attribute>
          &lt;/zeroOrMore>
          &lt;ref name="any"/>
        &lt;/element>
        &lt;text/>
      &lt;/choice>
    &lt;/zeroOrMore>
  &lt;/define></codeblock></p>
              <p>Where the &lt;ref> and &lt;name> elements are repeated for each element type used from the shell that defines the @id attribute directly. For topic types this will be any topic types
                used from the shell (the root topic type and any allowed nested topic types). For maps this will be the map element type (&lt;map> or specializations of &lt;map>) and the &lt;anchor>
                element type or any specialization of &lt;anchor>. Domains and constraint modules may also define patterns that define the @id attribute directly.</p>
              <p>The ID-defining elements override section must use the
                comment:<codeblock>&lt;!-- ============================================================= -->
&lt;!--                 ID-DEFINING-ELEMENT OVERRIDES                 -->
&lt;!-- ============================================================= --></codeblock></p>
            </dd>
          </dlentry>
        </dl>
        <example>
          <title>Sample topic type shell</title>
          <p>Strict task document type shell:</p>
          <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!-- ============================================================= 
  MODULE:    DITA Task RNG
  VERSION:   1.2
  DATE:      November 2010
  ============================================================= -->
&lt;!--
  Refer to the latest version of this file by the following URI:
  urn:dita-ng:dita:rng:task.rng
  To refer to this specific version, you may use this value:
  urn:dita-ng:dita:rng:task.rng:1.2
-->
&lt;!-- ============================================================= 
  SYSTEM:     Darwin Information Typing Architecture (DITA)
  PURPOSE:    Relax NG schema to describe DITA Tasks
  ORIGINAL CREATION DATE:
  September 2010
  (C) Copyright Syncro Soft 2010-2011
  All Rights Reserved.
  ============================================================= -->
&lt;grammar xmlns="http://relaxng.org/ns/structure/1.0"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">
  &lt;moduleDesc xmlns="http://dita.oasis-open.org/architecture/2005/">
    &lt;headerComment>
&lt;/headerComment>
   &lt;moduleMetadata>
     &lt;moduleType>topicshell&lt;/moduleType>
     &lt;moduleShortName>vocabularyModule&lt;/moduleShortName>
     &lt;shellPublicIds>
       &lt;dtdShell>-//OASIS//DTD DITA Topic//EN&lt;/dtdShell>
       &lt;xsdShell>urn:oasis:names:tc:dita:xsd:topic.xsd&lt;/xsdShell>
       &lt;rncShell>urn:oasis:names:tc:dita:rnc:topic.rnc&lt;/rncShell>
       &lt;rngShell>urn:oasis:names:tc:dita:rng:topic.rng&lt;/rngShell>
     &lt;/shellPublicIds>
   &lt;/moduleMetadata>
 &lt;/moduleDesc>  
  
&lt;!-- ============================================================= -->
&lt;!--                 ROOT ELEMENT DECLARATION                      -->
&lt;!-- ============================================================= -->
  &lt;start>
    &lt;ref name="task.element"/>
  &lt;/start>
  
&lt;!-- ============================================================= -->
&lt;!--                 MODULE INCLUSIONS                             -->
&lt;!-- ============================================================= -->

  &lt;include href="strictTaskbodyConstraintMod.rng">
    &lt;a:documentation>
      Redefine the infotype entity to exclude 
      other topic types and disallow nesting
    &lt;/a:documentation>
    &lt;define name="task-info-types">
      &lt;ref name="task.element"/>
    &lt;/define>
  &lt;/include>
  &lt;include href="../../base/rng/highlightDomainMod.rng"/>
  &lt;include href="../../base/rng/utilitiesDomainMod.rng"/>
  &lt;include href="../../base/rng/indexingDomainMod.rng"/>
  &lt;include href="../../base/rng/hazardstatementDomainMod.rng"/>
  &lt;include href="abbreviateDomainMod.rng"/>
  &lt;include href="uiDomainMod.rng"/>
  &lt;include href="programmingDomainMod.rng"/>
  &lt;include href="softwareDomainMod.rng"/>
 
&lt;!-- ============================================================= -->
&lt;!--                 ID-DEFINING-ELEMENT OVERRIDES                 -->
&lt;!-- ============================================================= -->
  &lt;define name="any">
    &lt;zeroOrMore>
      &lt;choice>
        &lt;ref name="task.element"/>
        &lt;element>
          &lt;anyName>
            &lt;except>
              &lt;name>task&lt;/name>
            &lt;/except>
          &lt;/anyName>
          &lt;zeroOrMore>
            &lt;attribute>
              &lt;anyName/>
            &lt;/attribute>
          &lt;/zeroOrMore>
          &lt;ref name="any"/>
        &lt;/element>
        &lt;text/>
      &lt;/choice>
    &lt;/zeroOrMore>
  &lt;/define>
&lt;/grammar></codeblock>
        </example>
        <example>
          <title>Sample map type shell</title>
          <p>Base map document type shell:</p>
          <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;grammar xmlns="http://relaxng.org/ns/structure/1.0"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">
  &lt;moduleDesc xmlns="http://dita.oasis-open.org/architecture/2005/">
   &lt;moduleTitle>DITA Highlight Domain&lt;/moduleTitle>
   &lt;headerComment>&lt;!-- ============================================================= -->
&lt;!--                    HEADER                                     -->
&lt;!-- ============================================================= -->
&lt;!--  MODULE:    DITA Base MAP DTD (only base domains)             -->
&lt;!--  VERSION:   1.2                                               -->
&lt;!--  DATE:      April 2010                                        -->
&lt;!--                                                               -->
&lt;!-- ============================================================= -->

&lt;!-- ============================================================= -->
&lt;!--                    PUBLIC DOCUMENT TYPE DEFINITION            -->
&lt;!--                        TYPICAL INVOCATION                     -->
&lt;!--                                                               -->
&lt;!-- Refer to this file by the following public identifier or an
     appropriate system identifier:
PUBLIC "-//OASIS//DTD DITA Base Map//EN"
     Delivered as file "basemap.dtd"                               -->

&lt;!-- The public ID above refers to the latest version of this DTD.
     To refer to this specific version, you may use this value:
PUBLIC "-//OASIS//DTD DITA 1.2 Base Map//EN"                       -->

&lt;!-- ============================================================= -->
&lt;!-- SYSTEM:     Darwin Information Typing Architecture (DITA)     -->
&lt;!--                                                               -->
&lt;!-- PURPOSE:    DTD to describe DITA maps                         -->
&lt;!--                                                               -->
&lt;!-- ORIGINAL CREATION DATE:                                       -->
&lt;!--             April 2010                                        -->
&lt;!--                                                               -->
&lt;!--             (C) Copyright OASIS Open 2010                     -->
&lt;!--             All Rights Reserved.                              -->
&lt;!--                                                               -->
&lt;!--  UPDATES:                                                     -->
&lt;!--    2010.09.20 RDA: Add topic-based domains                    -->
&lt;!-- ============================================================= -->
&lt;/headerComment>
    &lt;moduleMetadata>
      &lt;moduleType>mapshell&lt;/moduleType>
      &lt;moduleShortName>basemap&lt;/moduleShortName>
      &lt;shellPublicIds>
       &lt;dtdShell>-//OASIS//DTD DITA Base Map//EN&lt;/dtdShell>
       &lt;xsdShell>urn:oasis:names:tc:dita:xsd:basemap.xsd&lt;/xsdShell>
       &lt;rncShell>urn:oasis:names:tc:dita:rng:basemap.rnc&lt;/rncShell>
       &lt;rngShell>urn:oasis:names:tc:dita:rng:basemap.rng&lt;/rngShell>
      &lt;/shellPublicIds>
    &lt;/moduleMetadata>
  &lt;/moduleDesc>
&lt;!-- ============================================================= -->
&lt;!--                 ROOT ELEMENT DECLARATION                      -->
&lt;!-- ============================================================= -->
  &lt;start>
    &lt;ref name="map.element"/>
  &lt;/start>

&lt;!-- ============================================================= -->
&lt;!--                 MODULE INCLUSIONS                             -->
&lt;!-- ============================================================= -->
  &lt;include href="mapMod.rng"/>
  &lt;include href="delayResolutionDomainMod.rng"/>
  &lt;include href="indexingDomainMod.rng"/>
  &lt;include href="mapGroupMod.rng"/>
  &lt;include href="highlightDomainMod.rng"/>
  &lt;include href="utilitiesDomainMod.rng"/>
  &lt;include href="hazardstatementDomainMod.rng"/>
  
&lt;!-- ============================================================= -->
&lt;!--                 ID-DEFINING-ELEMENT OVERRIDES                 -->
&lt;!-- ============================================================= -->
  &lt;define name="any">
    &lt;zeroOrMore>
      &lt;choice>
        &lt;ref name="map.element"/>
        &lt;ref name="anchor.element"/>
        &lt;element>
          &lt;anyName>
            &lt;except>
              &lt;name>map&lt;/name>
              &lt;name>anchor&lt;/name>
            &lt;/except>
          &lt;/anyName>
          &lt;zeroOrMore>
            &lt;attribute>
              &lt;anyName/>
            &lt;/attribute>
          &lt;/zeroOrMore>
          &lt;ref name="any"/>
        &lt;/element>
        &lt;text/>
      &lt;/choice>
    &lt;/zeroOrMore>
  &lt;/define>
&lt;/grammar></codeblock>
        </example>
      </conbody>
    </concept>
    <concept
      id="concept_sbf_fn4_2m">
      <title>RelaxNG grammar specialization module coding requirements</title>
      <shortdesc>To be extensible and backward compatible, DITA requires that a RelaxNG implementation of structural and domain specialization modules conform to well-defined implementation (coding)
        requirements.</shortdesc>
      <conbody>
        <p>These coding requirements implement the specialization architecture with the capabilities and within the limitations of the RelaxNG grammar. They are the coding requirements for structural
          specializations, element domain specializations, and attribute domain specializations.</p>
        <p>RelaxNG XML syntax modules that are intended to be used to generate corresponding DTD and XSD schema modules <term
          outputclass="OASIS-terminology">must</term> include the &lt;moduleDesc> element. See <xref
          href="#concept_lbt_ct4_2m"
          format="dita"/>.</p>
        <p>Unlike DTD and XSD-schema modules, RelaxNG modules are self integrating such that document type shells need only include the module.</p>
        <p>RelaxNG is capable of expressing constraints that are more precise than is possible with either DTDs or XSDs. For example, RelaxNG patterns can be context specific such that the same
          element type may allow different content or attributes in different contexts. Where generation of DTD or XSD schema modules from RelaxNG modules is a requirement you must take care to avoid
          RelaxNG features that cannot be translated into DTD or XSD constructs.</p>
        <p>The use of RelaxNG for DITA vocabularies depends on use of the <cite>RELAX NG DTD Compatibility</cite> specification, a companion standard to the RelaxNG specification. The DTD
          compatibility specification defines a mechanism for specifying attribute default values and for including documentation equivalent to DTD comments. Elements and attributes defined by the DTD
          compatibility specification are in the namespace "http://relaxng.org/ns/compatibility/annotations/1.0", by convention bound to the prefix "a". </p>
        <p>Processors that operate on DITA documents governed by RelaxNG schemas and for which the defaulted attributes are not specified in the DITA documents must implement support for the attribute
          default annotation in order to have access to values for the @domains and @class attributes. At the time of publication of version 1.3 of the DITA specification this support is available for
          Java XML parsers and is integrated in the DITA Open Toolkit starting with version 1.6.</p>
        <p>All vocabulary and constraint modules must include the following section:</p>
        <dl>
          <dlentry>
            <dt>Domains attribute contribution</dt>
            <dd>
              <p>Vocabulary modules <term
                outputclass="OASIS-terminology">must</term> define a @domains attribute contribution pattern named "domains-att-contribution" with a @combine value of "choice". The value of the
                pattern <term>must</term> list the dependencies of the domain module in order of dependency from left to right within enclosing parentheses, starting with the topic module. Domain
                abbreviations are used in the list, and the defining domain is the last item in the list. The following example declares the dependency of the highlight domain on the base topic
                module.
                <codeblock>&lt;!-- ============================================================= -->
&lt;!--                 DOMAINS ATTRIBUTE CONTRIBUTION                -->
&lt;!-- ============================================================= -->

  &lt;define name="domains-att-contribution" combine="choice">
    &lt;value>(topic hi-d)&lt;/value>
  &lt;/define></codeblock></p>
              <p>The domains attribute contribution pattern is used to construct the effective value of the @domains attribute for a map or topic type as configured in a document type shell.</p>
            </dd>
          </dlentry>
        </dl>
      </conbody>
      <concept
        id="concept_vmn_pbr_2m">
        <title>General element type declaration requirements</title>
        <shortdesc>Structural and element domain vocabulary modules <term
          outputclass="OASIS-terminology">must</term> reflect the same coding requirements for element type declarations.</shortdesc>
        <conbody>
          <note>The RelaxNG XML and compact syntaxes are equivalent for the purposes of validating documents. However, because only the XML syntax enables generation of other contraint language forms,
            the expectation is that most modules will be defined using the XML syntax. Thus, most of the examples show the RelaxNG XML syntax.</note>
          <section>
            <title>Module names</title>
            <p>Each vocabulary module has a short name that is used to construct file names, pattern names, and other names used in associated declarations. Modules <term>may</term> also have
              abbreviated names that further shorten the short name, for example "sw" for the "software" domain, where "software" is the short name and "sw" is the abbreviated name. </p>
            <p>For structural modules, the module name <term>must</term> be the element type name of the top-level topic or map type defined by the module, such as "concept" or "bookmap".</p>
            <p>For element domain modules, the module name <term>must</term> be a name that reflects the subject domain to which the domain applies, such as "highlight", "software". Domain module
              names should be sufficiently unique that they are unlikely to conflict with any other domains.</p>
          </section>
          <section>
            <title>Module files</title>
            <p>A RelaxNG vocabulary module consists of a single module file. </p>
            <p>For structural modules, the file name is the module name plus "Mod" plus an extension of either ".rng" for RelaxNG XML syntax modules or ".rnc" for RelaxNG compact syntax modules, e.g.,
              "conceptMod.rng", "glossentryMod.rnc".</p>
            <p>For domain modules, the file name is the domain name plus <filepath>DomainMod</filepath> plus an extension of either ".rng" for RelaxNG XML syntax modules or ".rnc" for RelaxNG compact
              syntax modules, e.g. <filepath>highlightDomainMod.rng</filepath>, <filepath>newAttDomainMod.rnc</filepath>.</p>
          </section>
          <section
            id="section_AF5B8ABA77DA4474A0AF0DF0AFD8E018">
            <title>Element definitions</title>
            <p>A structural or element domain vocabulary module <term>must</term> contain a declaration for each specialized element type named by the module. While the XML standard allows content
              models to refer to undeclared element types, all element types named in content models or attribute list declarations within a vocabulary module <term>must</term> have a RelaxNG element
              declaration, in one of:<ul
              id="ul_n1b_vbr_2m">
              <li>The vocabulary module</li>
              <li>A base module of which the vocabulary module is a direct or indirect specialization</li>
              <li>A required domain module (if the vocabulary module is a structural module).</li>
              </ul></p>
            <p>The specialized elements <term>must</term> follow the rules of the architecture in defining content models and attributes.</p>
            <p>The element type patterns are organized into the following sections:<dl>
              <dlentry>
                <dt>Element type name patterns</dt>
                <dd>
                  <p>This section <term
                    outputclass="OASIS-terminology">should</term> be introduced with the
                    comment:<codeblock>&lt;!-- ============================================================= -->
&lt;!--                 ELEMENT TYPE NAME PATTERNS                    -->
&lt;!-- ============================================================= --></codeblock></p>
                  <p>For each element type declared in the vocabulary module there <term
                    outputclass="OASIS-terminology">must</term> be a pattern whose name is the element type name and whose content is a reference to the element type's ".element" pattern. For
                    example:<codeblock>  &lt;define name="b">
    &lt;ref name="b.element"/>
  &lt;/define></codeblock></p>
                  <p>The element type name pattern provides a layer of abstraction that facilitates redefinition. The element type name patterns are referenced from content model and domain extension
                    patterns. Specialization modules can redeclare the patterns to include specializations of the type, allowing the specialized types in all contexts where the base type is
                    allowed.</p>
                  <p>The declarations <term>may</term> occur in any order. By convention, they are usually ordered alphabetically or grouped logically. </p>
                </dd>
              </dlentry>
              <dlentry>
                <dt>Common content model patterns</dt>
                <dd>Structural and element domain modules <term
                  outputclass="OASIS-terminology">may</term> include a "common content model patterns" section that defines patterns that contribute to the content models of the element types defined
                  in the module. This section <term
                  outputclass="OASIS-terminology">must</term> use the
                  comment:<codeblock>&lt;!-- ============================================================= -->
&lt;!--                 COMMON CONTENT MODEL PATTERNS                 -->
&lt;!-- ============================================================= --></codeblock><p>Common
                  content model patterns <term
                  outputclass="OASIS-terminology">should</term> use names that end with ".cnt", e.g. "body.cnt".</p></dd>
              </dlentry>
              <dlentry>
                <dt>Common attribute sets</dt>
                <dd>Structural and element domain modules <term
                  outputclass="OASIS-terminology">may</term> include a "common attribute sets" section that defines patterns for attribute sets common to one or more of the element types defined in
                  the module. This section <term
                  outputclass="OASIS-terminology">must</term> use the
                  comment:<codeblock>&lt;!-- ============================================================= -->
&lt;!--                 COMMON ATTRIBUTE SETS                         -->
&lt;!-- ============================================================= --></codeblock><p>Common
                  attribute set patterns <term
                  outputclass="OASIS-terminology">should</term> use names that with "-atts", e.g. "topicref-atts".</p></dd>
              </dlentry>
              <dlentry>
                <dt>Element type declarations</dt>
                <dd>For each element type declared in the vocabulary module there <term
                  outputclass="OASIS-terminology">must</term> be a set of patterns that define the content model and attributes for the element type. Each set of patterns <term
                  outputclass="OASIS-terminology">should</term> start with a descriptive comment of the
                  form:<codeblock>&lt;!--                    LONG NAME: Topic Head                      --></codeblock><p>Each element type <term
                  outputclass="OASIS-terminology">must</term> have a content model pattern named <codeph><i>tagname</i>.content</codeph>. The value of the pattern must be the complete content model
                  definition. For
                  example:<codeblock>  &lt;!-- LONG NAME: Topic Head -->
  &lt;define name="topichead.content">
    &lt;optional>
      &lt;ref name="topicmeta"/>
    &lt;/optional>
    &lt;zeroOrMore>
      &lt;choice>
        &lt;ref name="anchor"/>
        &lt;ref name="data.elements.incl"/>
        &lt;ref name="navref"/>
        &lt;ref name="topicref"/>
      &lt;/choice>
    &lt;/zeroOrMore>
  &lt;/define></codeblock>The
                  content model pattern <term>may</term> be overridden in constraint modules to further constrain the content model for the element type.</p><p>Each element type <term
                  outputclass="OASIS-terminology">must</term>  have an attribute list pattern named <codeph><i>tagname</i>.attributes</codeph>. The pattern entity must declare all attributes used by
                  the element type (except for the attributes provided by the <codeph>global-atts</codeph> pattern, which is always referenced as part of the attribute list declaration for an
                  element's class attribute). For
                  example:<codeblock>  &lt;define name="topichead.attributes">
    &lt;optional>
      &lt;attribute name="navtitle"/>
    &lt;/optional>
    &lt;optional>
      &lt;attribute name="outputclass"/>
    &lt;/optional>
    &lt;optional>
      &lt;attribute name="keys"/>
    &lt;/optional>
    &lt;optional>
      &lt;attribute name="copy-to"/>
    &lt;/optional>
    &lt;ref name="topicref-atts"/>
    &lt;ref name="univ-atts"/>
  &lt;/define></codeblock></p><p>The
                  attribute list declaration <term
                  outputclass="OASIS-terminology">may</term> be overridden in constraint modules to further constraint the attribute list for the element type.</p><p>Each element type <term
                  outputclass="OASIS-terminology">must</term> have a pattern named <codeph><i>tagname</i>.element</codeph> containing an &lt;element> element whose @name value is the element type name
                  and whose content is a reference to the <codeph><i>tagname</i>.attlist</codeph> and <codeph><i>tagname</i>.content</codeph> patterns. The &lt;element> element <term
                  outputclass="OASIS-terminology">should</term> include a &lt;documentation> element in the RelaxNG compatibility "http://relaxng.org/ns/compatibility/annotations/1.0" namespace (by
                  convention, bound to the prefix "a") containing a short description of the element type. The description should not include any unescaped XML markup. For
                  example:<codeblock>  &lt;define name="topichead.element">
    &lt;element name="topichead">
      &lt;a:documentation>The &amp;lt;topichead> element provides a title-only entry in a navigation map,
        as an alternative to the fully-linked title provided by the &amp;lt;topicref> element. 
        Category: Mapgroup elements&lt;/a:documentation>
      &lt;ref name="topichead.attlist"/>
      &lt;ref name="topichead.content"/>
    &lt;/element>
  &lt;/define></codeblock></p><p>Each
                  element type must have a pattern named <codeph><i>tagname</i>.attlist</codeph> with a @combine value of "interleave" containing only a reference to the
                  <codeph><i>tagname</i>.attributes</codeph> pattern. For
                  example:<codeblock>  &lt;define name="topichead.attlist" combine="interleave">
    &lt;ref name="topichead.attributes"/>
  &lt;/define></codeblock></p><p>The content model,
                  attributes, element and attlist patterns <term
                  outputclass="OASIS-terminology">should</term> be grouped together within the module. Each such group of patterns <term
                  outputclass="OASIS-terminology">may</term> occur in any order within the module. For
                  example:<codeblock>&lt;!-- LONG NAME: Topic Head -->
  &lt;define name="topichead.content">
    &lt;optional>
      &lt;ref name="topicmeta"/>
    &lt;/optional>
    &lt;zeroOrMore>
      &lt;choice>
        &lt;ref name="anchor"/>
        &lt;ref name="data.elements.incl"/>
        &lt;ref name="navref"/>
        &lt;ref name="topicref"/>
      &lt;/choice>
    &lt;/zeroOrMore>
  &lt;/define>
  &lt;define name="topichead.attributes">
    &lt;optional>
      &lt;attribute name="navtitle"/>
    &lt;/optional>
    &lt;optional>
      &lt;attribute name="outputclass"/>
    &lt;/optional>
    &lt;optional>
      &lt;attribute name="keys"/>
    &lt;/optional>
    &lt;optional>
      &lt;attribute name="copy-to"/>
    &lt;/optional>
    &lt;ref name="topicref-atts"/>
    &lt;ref name="univ-atts"/>
  &lt;/define>
  &lt;define name="topichead.element">
    &lt;element name="topichead">
      &lt;a:documentation>The &amp;lt;topichead> element provides a title-only entry in a navigation map,
        as an alternative to the fully-linked title provided by the &amp;lt;topicref> element. 
        Category: Mapgroup elements&lt;/a:documentation>
      &lt;ref name="topichead.attlist"/>
      &lt;ref name="topichead.content"/>
    &lt;/element>
  &lt;/define>
  &lt;define name="topichead.attlist" combine="interleave">
    &lt;ref name="topichead.attributes"/>
  &lt;/define></codeblock></p></dd>
              </dlentry>
              <dlentry>
                <dt>Specialization attribute declarations</dt>
                <dd>
                  <p>A vocabulary module <term>must</term> define a @class attribute for every specialized element declared in the module.</p>
                  <p>This section declares the @class attributes for the element types defined in the module. This section <term
                    outputclass="OASIS-terminology">must</term> be introduced by the comment:</p>
                  <codeblock>&lt;!-- ============================================================= -->
&lt;!--                    SPECIALIZATION ATTRIBUTE DECLARATIONS      -->
&lt;!-- ============================================================= --></codeblock>
                  <p>For each element type defined in the  module there <term
                    outputclass="OASIS-terminology">must</term> be a pattern named <codeph><i>tagname</i>.attlist</codeph> that contains a reference to the attribute list pattern "global-atts" and
                    defines an optional attribute named "class". The @class attribute default value <term>must</term> include the value of the @class attribute of the base element, and append to it
                    the element name qualified by the topic element name with at least one leading and trailing space. The @class attribute for an element introduced by a structural specialization
                    <term>must</term> start with a minus sign ("-"). The @class attribute for a domain specialization <term>must</term> start with a plus sign ("+"). The initial minus or plus sign
                    <term>must</term> be followed by one or more spaces. The attribute value <term>must</term> end with one or more trailing spaces. </p>
                  <p>The attribute default value is declared using the @defaultValue attribute from the RelaxNG DTD compatibility namespace "http://relaxng.org/ns/compatibility/annotations/1.0" (by
                    convention bound to the prefix "a").</p>
                  <p>For
                    example:<codeblock>  &lt;define name="anchorref.attlist" combine="interleave">
    &lt;ref name="global-atts"/>
    &lt;optional>
      &lt;attribute name="class" 
        a:defaultValue="+ map/topicref mapgroup-d/anchorref "
      />
    &lt;/optional>
  &lt;/define></codeblock></p>
                  <p>The @class attribute declarations for a module <term>must</term> be grouped together at the end of the module after any other declarations. The declarations may occur in any
                    order. By convention they are often ordered alphabetically or grouped logically.</p>
                  <p>See <xref
                    href="classatt.dita#classatt"
                    format="dita"/> for complete details on the @class attribute.</p>
                </dd>
              </dlentry>
              </dl></p>
          </section>
        </conbody>
      </concept>
      <concept
        id="concept_tcz_3zr_2m">
        <title>Structural module coding requirements</title>
        <shortdesc>A structural vocabulary module defines a new topic or map type as a specialization of a base topic or map type. The purpose is usually to enhance the user's interaction by adapting
          the topic or map type to its particular purposes.</shortdesc>
        <conbody>
          <p>A structural type module <term>must</term> conform to the following coding requirements in addition to the general module coding requirements: </p>
          <section>
            <title>Architecture attributes</title>
            <p>The topic or map element type <term>must</term> declare the @DITAArchVersion attribute and set its value to "1.3". This attribute gives processors a reliable way to check the
              architecture version. In addition, because the @DITAArchVersion attribute is in a DITA-defined namespace, it serves as an unambiguous signal that the element is a DITA element. </p>
            <p>The archtictural attributes section <term
              outputclass="OASIS-terminology">must</term> use the
              comment:<codeblock>&lt;!-- ============================================================= -->
&lt;!--                 ARCHITECTURE ATTRIBUTES                       -->
&lt;!-- ============================================================= --> </codeblock></p>
            <p>The architectural attributes pattern <term
              outputclass="OASIS-terminology">must</term> have the name "arch-atts" and <term
              outputclass="OASIS-terminology">must</term> declare the @DITAArchVersion
              attribute:<codeblock>  &lt;define name="arch-atts">
    &lt;optional>
      &lt;attribute name="ditaarch:DITAArchVersion" a:defaultValue="1.2"/>
    &lt;/optional>
  &lt;/define></codeblock></p>
          </section>
        </conbody>
      </concept>
      <concept
        id="concept_dsc_kzr_2m">
        <title>Topic type module coding requirements</title>
        <shortdesc>Topic type vocabulary modules <term>must</term> conform to additional coding requirements for defining default topic nesting.</shortdesc>
        <conbody>
          <section
            id="section_5E63C9E47F0D41EE83D5EB24F1617684">
            <title>Default nested topics pattern</title>
            <p>A topic type module <term>must</term> define a pattern to specify default subordinate topics. The pattern name <term>must</term> be the topic element name plus the
              <codeph>-info-types</codeph> suffix. For example, the info-types pattern for the concept topic is <codeph>concept-info-types</codeph>. If the topic has default subordinate topics, this
              pattern can refer to a list of topic element type name patterns. If not, the pattern can refer to the <codeph>info-types</codeph> pattern as in the following example:</p>
            <codeblock>  &lt;define name="concept-info-types">
    &lt;ref name="info-types"/>
  &lt;/define></codeblock>
            <p>A document type shell can then control how topics are allowed to nest by redefining the <codeph><varname>topictype</varname>-info-types</codeph> pattern for each topic type, or it can
              efficiently create common nesting rules by redefining the main info-types pattern.</p>
            <p>In the declaration of the root element of a topic type, the last position in the content model <term>must</term> be the <codeph><varname>topictype</varname>-info-types</codeph> nested
              topics pattern, as in the following example:</p>
            <codeblock>  &lt;!-- LONG NAME: Concept -->
  &lt;define name="concept.content">
    &lt;ref name="title"/>
    &lt;optional>
      &lt;ref name="titlealts"/>
    &lt;/optional>
    &lt;optional>
      &lt;choice>
        &lt;ref name="abstract"/>
        &lt;ref name="shortdesc"/>
      &lt;/choice>
    &lt;/optional>
    &lt;optional>
      &lt;ref name="prolog"/>
    &lt;/optional>
    &lt;optional>
      &lt;ref name="conbody"/>
    &lt;/optional>
    &lt;optional>
      &lt;ref name="related-links"/>
    &lt;/optional>
    &lt;zeroOrMore>
      &lt;ref name="concept-info-types"/>
    &lt;/zeroOrMore>
  &lt;/define></codeblock>
          </section>
        </conbody>
      </concept>
      <concept
        id="concept_jck_lzr_2m">
        <title>Element domain module coding requirements</title>
        <conbody>
          <section>
            <title>Domain extension patterns</title>
            <p>The domain extension patterns serve to integrate domain modules into the base content models of the element types it extends when the module is included in a document type shell. This
              section <term
              outputclass="OASIS-terminology">must</term> use the
              comment:<codeblock>&lt;!-- ============================================================= -->
&lt;!--                 DOMAIN EXTENSION PATTERNS                     -->
&lt;!-- ============================================================= --></codeblock></p>
            <p>For each element type that is extended by the element domain module, the module <term
              outputclass="OASIS-terminology">must</term> define a domain extension pattern consisting of a choice group of references to each element type name pattenrs of the domain-provided
              extensions of the extended element type. The name of the pattern <term
              outputclass="OASIS-terminology">must</term> be constructed from the short name for the domain, "-d-", and the element type being extended. For example, this pattern extends the &lt;ph>
              element to add the highlight-domain-defined specializations of
              &lt;ph>:<codeblock>  &lt;define name="hi-d-ph">
    &lt;choice>
      &lt;ref name="b"/>
      &lt;ref name="i"/>
      &lt;ref name="sup"/>
      &lt;ref name="sub"/>
      &lt;ref name="tt"/>
      &lt;ref name="u"/>
    &lt;/choice>
  &lt;/define>
</codeblock></p>
            <p>For each element type that is extended by the element domain module, the module <term
              outputclass="OASIS-terminology">must</term> redefine the element type's pattern with a @combine value of "choice" containing a reference to the domain extension pattern. For example,
              this pattern adds the highlight domain specializations of &lt;ph> to the &lt;ph> content
              model:<codeblock>  &lt;define name="ph" combine="choice">
    &lt;ref name="hi-d-ph"/>
  &lt;/define></codeblock></p>
            <p>Because the redefinition of the extended element type's pattern uses a @combine value of "choice", the effect is that the domain-provided elements are added to the effective content
              model of the extended element in any grammar that includes the domain module.</p>
          </section>
        </conbody>
      </concept>
      <concept
        id="concept_y21_mzr_2m">
        <title>Attribute domain module coding requirements</title>
        <shortdesc>An attribute domain vocabulary module declares a new attribute specialized from either the @props or @base attribute. An attribute domain module defines exactly one new attribute
          type.</shortdesc>
        <conbody>
          <p>An attribute domain's name is the name of the attribute plus "Att" to distinguish the attribute domain from any element domains with the same name. For example, for an attribute named
            "new" the attribute domain name would be "newAtt". The attribute domain name is used to construct filenames and pattern names for the domain. </p>
          <p>An attribute domain <term>must</term> consist of one file, whose name consists of the module name plus <filepath>DomainMod</filepath> plus the <filepath>rng</filepath> or
            <filepath>rnc</filepath> extension. For example: <filepath>newAttDomainMod.rng</filepath> for an attribute named "new". </p>
          <p>The file <term>must</term> have three parts:<dl>
            <dlentry>
              <dt>Domains attribute contribution pattern</dt>
              <dd>
                <p>The attribute domain is declared in @domains attribute values through a pattern that contains the attribute domain's domain declaration fragment. The pattern name <term
                  outputclass="OASIS-terminology">must</term> be "domains-att-contribution". See <xref
                  href="domainsatt.dita#domainsatt"
                  format="dita"/> for details on attribute domain @domains values.</p>
                <p>For example:</p>
                <codeblock>  &lt;define name="domains-att-contribution" combine="choice">
    &lt;value>a(props deliveryTarget)&lt;/value>
  &lt;/define></codeblock>
              </dd>
            </dlentry>
            <dlentry>
              <dt>Attribute extension pattern</dt>
              <dd>The attribute extension pattern extends either the @props or @base attribute set pattern to include the attribute specialization. </dd>
              <dd>For specializations of @props the pattern <term
                outputclass="OASIS-terminology">must</term> be named "props-attribute-extensions" and <term
                outputclass="OASIS-terminology">must</term> specify a @combine value of "interleave". The content of the pattern <term
                outputclass="OASIS-terminology">must</term> be a reference to the specialized attribute declaration pattern. For
                example:<codeblock>  &lt;define name="props-attribute-extensions" combine="interleave">
    &lt;ref name="deliveryTargetAtt-d-attribute"/>
  &lt;/define></codeblock><p>For
                specializations of @base the pattern <term
                outputclass="OASIS-terminology">must</term> be named "base-attribute-extensions" and <term
                outputclass="OASIS-terminology">must</term> specify a @combine value of "interleave" The content of the pattern <term
                outputclass="OASIS-terminology">must</term> be a reference to the specialized attribute declaration pattern. For
                example:</p><codeblock>  &lt;define name="base-attribute-extensions" combine="interleave">
    &lt;ref name="myBaseSpecializationAtt-d-attribute"/>
  &lt;/define></codeblock></dd>
            </dlentry>
            <dlentry>
              <dt>Attribute declaration pattern</dt>
              <dd>The specialized attribute <term
                outputclass="OASIS-terminology">must</term> be declared in a pattern named <codeph><i>domainShortName</i>-d-attribute</codeph>. The attribute must be defined as optional. For
                example:<codeblock>  &lt;define name="deliveryTargetAtt-d-attribute">
    &lt;optional>
      &lt;attribute name="deliveryTarget"/>
    &lt;/optional>    
  &lt;/define></codeblock></dd>
            </dlentry>
            </dl></p>
        </conbody>
      </concept>
    </concept>
    <concept
      id="concept_ebs_mn4_2m">
      <title>Constraint module RelaxNG coding requirements</title>
      <shortdesc>A structural constraint module defines the constraints for exactly one map or topic element type.</shortdesc>
      <conbody>
        <section>
          <title>Requirements for structural constraint modules</title>
          <p>Constraint modules <term>should</term> be named "<varname>qualifier</varname><varname>tagname</varname>Constraints.mod", where <varname>qualifier</varname> is specific to the constraints
            module and characterizes it, e.g. "strict", "requiredTitle", etc. and <varname>tagname</varname> is the name of the element type to which the constraints apply, e.g. "topic", "p",
            "myNewTopicType", etc.</p>
          <p>The constraint module <term
            outputclass="OASIS-terminology">must</term> declare a @domains attribute contribution pattern named "domains-att-value" and <term
            outputclass="OASIS-terminology">must</term> specify a @combine value of "choice". The value of the pattern <term
            outputclass="OASIS-terminology">must</term> be of the form "(<varname>tagname</varname> <varname>qualifier</varname><varname>Tagname</varname>-c)", where <varname>tagname</varname> is the
            name of the element type to which the constraints apply, <varname>qualifier</varname> is as for the module filename (e.g., "strict"), and <varname>Tagname</varname> is the element type
            name with an initial capital (e.g. "Topic"). The literal "-c" indicates that the name is the name of a constraints domain.  For example:</p>
          <codeblock>  &lt;define name="domains-att-value" combine="choice">
    &lt;value>(topic task strictTaskbody-c)&lt;/value>
  &lt;/define></codeblock>
        </section>
        <section>
          <title>Requirements for domain constraint modules</title>
          <p>A domain constraint module defines the constraints for exactly one element domain module.</p>
          <p>Domain constraint modules <term>should</term> be named "<varname>qualifier</varname><varname>domain</varname>DomainConstraintsMod" with an extension of ".rng" or ".rnc", where
            <varname>qualifier</varname> is specific to the constraints module and characterizes it, e.g. "strict", "requiredTitle", etc. and <varname>domain</varname> is the name of the domain to
            which the constraints apply, e.g. "hi-d", "pr-d", "mydomain-d", etc. For
            example:<codeblock>  &lt;define name="domains-att-value" combine="choice">
    &lt;value>(topic task taskreq-d)&lt;/value>
  &lt;/define></codeblock></p>
        </section>
        <section>
          <title>Requirements for shell document types</title>
          <p>Constraint modules are integrated into document type shells by simply including the module into the shell document type. See <xref
            href="#concept_ecb_wg2_2m"
            format="dita"/>.</p>
          <?Pub Caret -1?>
        </section>
      </conbody>
    </concept>
    <concept id="concept_aqh_5zt_3h">
      <title>Specializing foreign or unknown content</title>
      <conbody>
        <p>[Insert new example before XSD sample.]</p>
        <example>
          <title>Example of specializing foreign content using RelaxNG</title>
          <p>The sample below describes how to create a domain declaration for the ???? element, but does not show how to integrate that declaration in a DITA document-type shell. For more specific
            information on creating document-type shells, see <xref
            href="relaxngmod.dita#modRelaxNG"
            format="dita"/></p>
        </example>
      </conbody>
    </concept>
  </topic>
</dita>
