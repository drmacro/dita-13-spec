namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"

dc:title [ "RuleML Positional Independence" ]
dc:version [ "1.0.01" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:subject [ "RuleML, positional independence" ]
dc:description [
  "The expansion module for positional independence."
]
dc:date [ "2012-04-03" ]
dc:language [ "en" ]
dcterms:rights [ "LGPL-3.0" ]
dc:relation [ "http://wiki.ruleml.org/index.php/Relax_NG" ]
start |= notAllowed

## Pre-fix operator notation for atomic formulas is optional in the relaxed-form serialization.
## This pattern cannot be translated accurately into XSD.
Atom.main |=
  operatorForAtoms-edge.choice & argumentsForAtoms.sequence

## Slotted arguments and positional arguments in atomic formulas
## may be interleaved in the relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
argumentsForAtoms.sequence |=
  positionalArgumentsForAtoms.sequence & slotsForAtoms.sequence

## Positional rest arguments in atomic formulas may occur in 
## any position relative to the slots in relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
positionalArgumentsForAtoms.sequence |=
  termsForAtoms.sequence & restOfPositionalArguments-edge.choice?

## Slotted rest arguments in atomic formulas may occur in 
## any position relative to the slots in relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
slotsForAtoms.sequence |=
  slotTermsForAtoms.sequence & restOfSlots-edge.choice?

## Pre-fix operator notation for expressions is optional in the relaxed-form serialization.
## This pattern cannot be translated accurately into XSD.
Expr.main |=
  operatorForExpressions-edge.choice
  & argumentsForExpressions.sequence

## Slotted arguments and positional arguments in expressions 
## may be interleaved in the relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
argumentsForExpressions.sequence |=
  positionalArgumentsForExpressions.sequence
  & slotsForExpressions.sequence

## Positional rest arguments in expressions may occur in 
## any position relative to the slots in relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
positionalArgumentsForExpressions.sequence |=
  termsForExpressions.sequence
  & restOfPositionalArguments-edge.choice?

## Slotted rest arguments in expressions may occur in 
## any position relative to the slots in relaxed-form serialization. 
## This pattern cannot be translated accurately into XSD.
slotsForExpressions.sequence |=
  slotTermsForExpressions.sequence & restOfSlots-edge.choice?

## In the relaxed-form serialization, the if and then 
## of an implication can occur in either order if striped.
## This pattern can be translated accurately into XSD.
Implies.main |=
  body_Implies.name.choice & head_Implies.name.choice

## In the relaxed-form serialization, the if and then 
## of a proof-theoretic entailment can occur in either order if striped.
## This pattern can be translated accurately into XSD.
Entails.main |=
  body_Entails.name.choice & head_Entails.name.choice

## In the relaxed-form serialization, the header element sequence is:
## an optional header element sequence as defined in Node.header, interleaved with optional
## object identifier and degree
## This pattern can be translated accurately into XSD using xs:any, but is not correctly translated by the Trang software.
Atom.header &= (Node.header? & objectIdentifier-edge.choice? & degree-edge.choice?)?
Equal.header &= (Node.header? & degree-edge.choice?)?
Expr.header &= (Node.header? & objectIdentifier-edge.choice?)?
# 
# 
# STRIPE-SKIPPING AND POSITIONAL-DNDEPENDENCE
# RELAX NG ENHANCEMENT

## non-linear interaction of stripe-skipping and relaxed-form serialization
## allows asynchronous stripe-skipping and if-then order reversal
Implies.main |= head_Implies-ss.content, body_Implies.name.choice
Implies.main |= head_Implies.name.choice, body_Implies-ss.content

## non-linear interaction of stripe-skipping and relaxed-form serialization
## allows asynchronous stripe-skipping and if-then order reversal
Entails.main |= head_Entails-ss.content, body_Entails.name.choice
Entails.main |= head_Entails.name.choice, body_Entails-ss.content
