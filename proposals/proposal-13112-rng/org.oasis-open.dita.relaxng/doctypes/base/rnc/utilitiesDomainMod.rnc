# ============================================================= 
# MODULE:    DITA Utilities Domain - RNG              
# VERSION:   1.2                                                
# DATE:      October 2010                                       
# =============================================================

# Refer to the latest version of this file by the following URI:
# urn:dita-ng:dita:rng:utilitiesDomainMod.rng
# To refer to this specific version, you may use this value:
# urn:dita-ng:dita:rng:utilitiesDomainMod.rng:1.2

# ============================================================= 
# SYSTEM:     Darwin Information Typing Architecture (DITA)     
# PURPOSE:    Define elements and specialization attributes
#             for Utilities Domain             
# ORIGINAL CREATION DATE:  
# September 2010                                                
# (C) Copyright Syncro Soft 2010-2011                                
# All Rights Reserved.                                          
# =============================================================

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

# Define the domain values of this module
domains-att-value |= "(topic ut-d)"
# Define domain extension patterns
ut-d-fig = imagemap.element
# Extend the patterns with the domain contribution
fig |= ut-d-fig
ut-d-data = sort-as.element
data |= ut-d-data
# Define patterns
imagemap = imagemap.element
area = area.element
shape = shape.element
coords = coords.element
# Define elements content and attributes

# LONG NAME: Imagemap
imagemap.content = image, area+
imagemap.attributes =
  display-atts,
  attribute spectitle { text }?,
  univ-atts,
  attribute outputclass { text }?
imagemap.element =
  
  ## The imagemap element supports the basic functionality of the HTML client-side
  ##         image map markup. Imagemap allows you to designate a linkable area or region over an image,
  ##         allowing a link in that region to display another topic. 
  ##         Category: Utilities elements
  element imagemap { imagemap.attlist, imagemap.content }
imagemap.attlist &= imagemap.attributes
# LONG NAME: Hotspot Area Description
area.content = shape, coords, xref
area.attributes =
  univ-atts,
  attribute outputclass { text }?
area.element =
  
  ## The area element supports the basic functionality of the HTML image map
  ##         markup. 
  ##         Category: Utilities elements
  element area { area.attlist, area.content }
area.attlist &= area.attributes
# LONG NAME: Shape of the Hotspot
shape.content = (text | \text)*
shape.attributes =
  attribute keyref { text }?,
  univ-atts-translate-no,
  attribute outputclass { text }?
shape.element =
  
  ## The shape element defines the shape of a linkable area in an imagemap.
  ##         Category: Utilities elements
  element shape { shape.attlist, shape.content }
shape.attlist &= shape.attributes
# LONG NAME: Coordinates of the Hotspot
coords.content = words.cnt*
coords.attributes =
  attribute keyref { text }?,
  univ-atts-translate-no,
  attribute outputclass { text }?
coords.element =
  
  ## The coords element specifies the coordinates of the linkable region in an
  ##         imagemap area. 
  ##         Category: Utilities elements
  element coords { coords.attlist, coords.content }
coords.attlist &= coords.attributes
# Specialization attributes. Global attributes and class defaults
imagemap.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/fig ut-d/imagemap " ]
  attribute class { text }?
area.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/figgroup ut-d/area " ]
  attribute class { text }?
shape.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/keyword ut-d/shape " ]
  attribute class { text }?
coords.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/ph ut-d/coords " ]
  attribute class { text }?
# LONG NAME: Shape of the Hotspot
sort-as.content = (text | keyword | \text)*
sort-as.attributes =
  univ-atts,
  attribute value { text }?,
  [ a:defaultValue = "+ topic/data ut-d/sort-as " ]
  attribute class { text }?
sort-as.element =
  
  ## The sort-as element provides the sort key to
  ## use when sorting and grouping the element in some way.
  ## The sort-as value is prepended to whatever text value would
  ## otherwise be used for sorting the containing element in order
  ## to form a complete sort key.
  element sort-as { sort-as.attlist, sort-as.content }
sort-as.attlist &= sort-as.attributes
