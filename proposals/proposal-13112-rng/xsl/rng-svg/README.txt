
RELAX-NG to SVG Stylesheets
---------------------------

This package consists of a collection of XSLT stylesheets for creating one or more
SVG diagrams of the structure of a RELAX-NG schema. The process for creating such
diagrams involves a number of steps, and so an Ant buildfile is also included to
make it easier to manage.


Acknowledgements
----------------

This package makes use of a stylesheet for RELAX-NG schema simplification created
and published by Eric van der Vlist [http://dyomedea.com], the schema can be
found at Eric's site here:
http://downloads.xmlschemata.org/relax-ng/utilities/simplification.xsl, but
is included in this package for convenience. 

Thanks to Eric for letting me redistribute his work!


Legal Stuff
-----------

This package is licensed under the same kind of terms as the Apache Software
License. Please read LICENSE.txt for the full legal mumbo-jumbo. The license
text is also online at http://www.techquila.com/download/LICENSE.txt

Requirements
------------

1. XSLT 1.1 Processor
---------------------
The stylesheets require an XSLT processor which supports XSLT version 1.1 features, 
specifically the xsl:document feature which enables the stylesheets to generate
multiple output files.
These stylesheets have been developed and tested with Saxon (download from
http://saxon.sourceforge.net/). The version used for development was 6.5.3.

2. [OPTIONAL] Apache Ant
------------------------

This is optional, but highly recommended. The file build.xml is an Ant project
file that manages the four-step XSLT transformation. This build file should
be compatible with most recent versions of Ant. It was developed and tested
with Ant version 1.5.4. Download Ant from http://ant.apache.org/


Running
-------

Overview of the process:

The process of generating SVG graphics from a RELAX-NG schema is split
into four separate steps.

  a. Parial simplification using Eric van der Vlist's simplifier stylesheet
     Stylesheet: simplification.xsl
     Input: the schema to be diagrammed
     Output: A set of simplified schemas.
     In this step the schema is simplified to step 12 in the process of
     simplification. 

  b. Defines simplification
     Stylesheet: rng-simplify-defines.xsl
     Input: The simplified schema file that ends "7-12.rng" from step (a)
     Output: The schema with defines simplified
     This step applies schema simplification step 18. The steps between 12
     and 18 are skipped because they would modify the structure of the 
     schema in ways which would affect the diagramming process.

  c. Complete diagram tree for the schema generated
     Stylesheet: rng2tree.xsl
     Input: The simplified schema from step (b)
     Output: A tree description of the schema
     This step creates a very simple XML tree description. The output of this
     step could be used to generate other representations of the schema structure.

  d. One or more SVG files are generated from the schema tree file
     Stylesheet: tree2svg.xsl
     Input: The tree description of the schema generated in step (c)
     Output: One or more SVG files
     By default a single diagram of the entire schema structure is created. However,
     parameters can be used to name specific elements or defines to be diagrammed.

Stylesheet parameters:

  simplification.xsl:

    out-name : REQUIRED: the prefix to be used for each output file generated by the 
               simplifier. Files are named {out-name}{step-number}.xml

    stop-after: OPTIONAL: the name of the step at which the simplification process
                should stop. NOTE: at the moment it seems that the stylesheet
                does not honour this parameter

  rng-simplify-defines.xsl:

    No parameters

  rng2tree.xsl

    No parameters

  tree2svg.xsl

    title:  OPTIONAL. A title to be displayed on each generated diagram.

    key:    OPTIONAL: The kind of diagram key to produce.
              Recognised values:
              static : Generate a normal key at the bottom of the diagram.
              dynamic : Generate an animated, expandable key at the top of the diagram.
              none : Do not generate a key.
              Default value = none. Any unrecognised value is also treated as 'none'.

    start-elements: OPTIONAL. A space-separated list of element names. If
                    specified, then the stylesheet will generate one SVG
                    diagram for each named element. Each diagram is 
                    rendered to a file named "element-{name}.svg".
                    Use the wildcard "*" to produce a diagram for each
                    element in the schema.

    start-patterns: OPTIONAL. A space-separated list of define names. If
                    specified, then the stylesheet will generate one SVG
                    diagram for each named define. Each diagram is 
                    rendered to a file named "pattern-{name}.svg".
                    Use the wildcard "*" to produce a diagram for each
                    define in the schema.

    NOTE: It is allowed to specify a value for both start-elements and
          start-patterns.

    NOTE: If no value is specified for either start-elements or start-patterns,
          then an SVG diagram of the entire schema will be created instead.


Using Ant:

  The easiest way to run these stylesheets is using the Ant build process.

  To do this, create a subdirectory named "schemas" in the directory containing 
  the build.xml file and stylesheets. Copy into this directory the schema
  you want to diagram. If the schema imports other files, make sure that these
  files are accessible too. Then you can invoke the build process using the 
  command:

    ant -Dschema=name_of_schema_file generate

  The generated SVG file(s) will be copied to a directory named "svg".

  The Ant build file also provides control over the stylesheet parameters.
  To see the full details of this, use the command:

    ant usage

  You can optionally create a file called build.properties in the same directory
  as the build.xml file. This file can be used to specify all of the properties
  to control the build process. See the file build.properties.template for
  an example of a build.properties file to control the build process.



CSS Styles
----------

A basic CSS stylesheet is provided and the generated SVG files all reference this
CSS stylesheet. Feel free to amend this CSS to suit your own aesthetic desires / 
match your wallpaper / render your SVG in the colours of your favourite team.



Last Word
---------

Well done for reading this far!

Please feel free to email me (kal@techquila.com) with any comments, requests for
enhancement, or bug reports. 
