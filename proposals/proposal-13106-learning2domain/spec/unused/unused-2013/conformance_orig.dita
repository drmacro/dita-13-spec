<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2009, v.4002-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<concept id="ThisIsARevisionOfTheDraftDITA1.2Co-034C9AC3" rev="1.2.1"
xml:lang="en-us">
<!--This topic started out as a draft that Elliot Kimber sent to the DITA TC on March 3, 2008. Eliot's draft was edited by me and resent to the TC. And the new draft was eventually entered into SVN where editing has continued. -JeffO-->
<!--The version being created on 9 December 2009 is based on revision 199 (31 August 2099). The revised version is a cut down version that leaves out a number of things that the DITA TC has run out of time to do for the 1.2 version of the spec. It also drops a number of items that aren't so much about conformance in general, but rather about specific requirements that would be best described or explained elsewhere in the specification. When the TC revisits this topic again for DITA 1.3, it may wish to return to revision 199 to see if some of the deleted material would be useful. -JeffO-->
<title>Conformance</title>
<shortdesc>This section outlines the requirements that must be met
for documents, document types, specialization and constraint modules,
and processors to be considered DITA conforming. This section also
defines conformance-related terminology and categories.</shortdesc>
<conbody>
<p>Conformance to the DITA Specification allows documents and document
types that are shared within and across organizations and used with
different processors or different versions of a processor to produce
the same or similar results with little or no reimplementation or
modification.</p>
<section> <title>Keywords</title><p>The words <keyword>must</keyword
>, <keyword>must not</keyword>, <keyword>required</keyword>, <keyword
>shall</keyword>, <keyword>shall not</keyword>, <keyword>should</keyword
>, <keyword>should not</keyword>, <keyword>recommended</keyword>, <keyword
>may</keyword>, and <keyword>optional</keyword> in the DITA Specification
are to be interpreted as described in <xref format="txt"
href="http://www.ietf.org/rfc/rfc2119.txt" scope="external">IETF RFC
2119: Key words for use in RFCs to Indicate Requirement Levels</xref
>. These terms are also summarized in the <xref format="dita"
href="archSpec/terminology.dita#terminology/conformanceTerms"
scope="local" type="ul">conformance terminology section</xref> of
the DITA Architectural Specification.</p><p>The use of these keywords
and other conformance requirements increase the level of interoperability
that is available between DITA conforming implementations. Their use
is not meant to impose particular methods on implementers where the
method is not required for interoperability.</p> </section>
<section> <title>Conformance statement</title><p>Documents, document
types, vocabulary and constraint modules, and processors that implement
the requirements given in the OASIS approved DITA Specification are
considered conforming.</p><p>Conforming DITA implementations <keyword
>must</keyword> include a conformance statement that gives the version
of the DITA Specification that is supported and lists the DITA features
that are supported by the implementation in accordance with the requirements
of that specification. Or, if it is clearer, the statement <keyword
>may</keyword> say that the implementation includes all of the features
for a particular category of implementation except for a specific
list of features that are not supported.</p><p>Implementations that
include some DITA features, but not others, are considered conforming
as long as all <keyword>required</keyword> features for the category
of implementation are included and all of the features that are included
follow the requirements given in the DITA Specification.</p><p>Organizations
and individuals are free to impose additional constraints on their
own use of DITA that go beyond the requirements imposed by the DITA
Specification, possibly including enforcement of the constraints by
their local tools, as long as the result continues to meet the requirements
given in the DITA Specification. For example, a given user community
could impose rules on how files must be named or organized even if
those rules go beyond the requirements given in the DITA Specification.</p
> </section>
<section> <title>Conformance categories</title><p>The following categories
help define the amount of flexibility that is available when implementing
specific requirements.</p><dl outputclass="1.00* 1.91* 2.09*">
<dlentry>
<dt>Required and invariant</dt>
<dd><p>Features that <keyword>must</keyword> be implemented exactly
as defined in the DITA Specification. This classification applies
primarily to the XML syntax, DITA documents, the rules for creating
DITA vocabulary and constraint modules and document types, and address
resolution behavior. </p></dd>
<dd><p>For example a given address <keyword>must</keyword> always
resolve to the same object for the same input data set and processing
conditions.</p></dd>
</dlentry>
<dlentry>
<dt>Required but variable</dt>
<dd><p>Features that <keyword>must</keyword> be implemented and for
which the effective result <keyword>must</keyword> be consistent with
the rules as defined in the DITA Specification, but for which the
specific expression may vary.</p></dd>
<dd><p>For example an implementation of the content reference feature
where all implementations <keyword>must</keyword> provide the same
effective result for the same input data set, but the way that effective
result is provided can vary. The content reference could be implemented
by a pre-process step that replaces the reference by the referenced
content or by a process that generates the functional equivalent of
the content reference in the target output (such as a transclusion
instruction in a Wiki page).</p></dd>
</dlentry>
<dlentry>
<dt>Variable with defaults</dt>
<dd><p>Features that <keyword>may</keyword> produce various behaviors
or outputs, but for which the DITA Specification defines a default
that all conforming implementations <keyword>must</keyword> provide. </p
><p>Implementations are <keyword>not required</keyword> to make the
DITA-defined default their default. Implementations are only <keyword
>required</keyword> to provide an appropriate set of options or configurations
that will provide the DITA-defined defaults.</p><p>These features
are primarily formatting defaults for elements where a default presentation
is natural or expected, such as paragraphs, lists, and tables. </p
></dd>
<dd><p>For example, an application for a specific use domain might
define default formatting behaviors that are significantly different
from the DITA-defined defaults. </p></dd>
</dlentry>
<dlentry>
<dt>Variable without defaults</dt>
<dd><p>Features that <keyword>may</keyword> be implemented to produce
various behaviors or outputs and for which the DITA Specification
defines no required default.</p><p>The DITA Specification may include
examples or suggested behaviors for these features, but such suggestions
are informative, not normative.</p></dd>
<dd><p>For example, an application specifically for legal information
could provide a different default presentation from an application
for technical documentation.</p></dd>
</dlentry>
<dlentry>
<dt>Normative</dt>
<dd><p>Normative information is the formal portion of the specification
that describes the binding rules and requirements that make up the
DITA standard and which must be followed.</p><p>The DITA Specification
contains both normative and informative information.</p><p>All information
in the DITA specification should be considered normative unless it
is an example or is labeled as informative or non-normative.</p></dd>
<dd><p>For example, the addressing requirements in the DITA specification
are normative.</p></dd>
</dlentry>
<dlentry>
<dt>Informative or non-normative</dt>
<dd><p>Informative information are descriptions that provide background,
examples, suggestions, and other useful information that are <i>not</i
> binding requirements or rules that must be followed.</p><p>The DITA
Specification contains normative and informative information. </p
><p>The term non-normative is sometimes used in place of the term
informative.</p></dd>
<dd><p>For example, the element by element list of translation considerations
that is included as an appendix of the DITA Architecture Specification
is informative rather than normative.</p></dd>
</dlentry>
<dlentry>
<dt>Examples</dt>
<dd><p>Examples are descriptions that help clarify or illustrate specific
aspects of the more general specification. Because examples are specific
rather than general, they may not illustrate all aspects or be the
only way to accomplish or implement an aspect of the specification.</p
><p>All examples are informative rather than normative unless it is
explicitly stated otherwise.</p></dd>
<dd><p>For example, everything in this column of this table is informative
rather than normative.</p></dd>
</dlentry>
</dl> </section>
<section> <title>Implementation categories</title><p>The following
summary outlines the conformance requirements for various categories
of implementation.</p><dl>
<dlentry>
<dt>Documents</dt>
<dd><p>Required but variable.</p><p>A conforming DITA document <keyword
>must</keyword> implement all content and structure requirements defined
by the DITA Specification. DTD or schema validity alone is not sufficient
to determine that a given document is a valid DITA conforming document.</p
></dd>
</dlentry>
<dlentry>
<dt>Document types (element and attribute definitions)</dt>
<dd><p>Required but variable.</p><p>A conforming DITA document type <keyword
>must</keyword> implement all of the syntactic and organizational
requirements for DITA document type declarations (DTDs) or schemas
(XSDs) as defined by the DITA Specification.</p></dd>
</dlentry>
<dlentry>
<dt>Vocabulary (specialization) and constraint modules</dt>
<dd><p>Required but variable.</p><p>Conforming DITA specialization
and constraint modules <keyword>must</keyword> implement all of the
syntactic and organizational requirements for DITA modules as defined
in the DITA Specification.</p></dd>
</dlentry>
<dlentry>
<dt>Addressing</dt>
<dd><p>Required and invariant.</p><p>Addressing includes the pointers
from one DITA construct to another or from a DITA construct to a non-DITA
construct including: href, keyref, conref, conkeyref, and other reference
values.</p><p>Addressing includes the syntax that <keyword>must</keyword
> be used to write addresses (pointers) as strings within DITA documents
and the rules that <keyword>must</keyword> be followed when pointers
are resolved to resources. How the resource is used once it is resolved
is not covered by this category.</p></dd>
</dlentry>
<dlentry>
<dt>Linking</dt>
<dd><p>Required but variable.</p><p>Includes those features that establish
relationships among abstract components, including: topicref, xref,
reltable, and data-about.</p><p>For a given relationship, the set
of related components and their DITA-defined roles within the relationship
are required and invariant. However, the rendition result for a given
relationship is variable with defaults for most of the DITA-defined
link types.</p></dd>
</dlentry>
<dlentry>
<dt>Content reference (conref)</dt>
<dd><p>Required and invariant.</p><p>This is a special case of linking
where there is less room for variance. In particular, the effective
value of resolving a content reference <keyword>must</keyword> be
invariant for a given pair of elements processed in a given map and
dita value context. However, the rendition result for a content reference <keyword
>may</keyword> vary.</p></dd>
</dlentry>
<dlentry>
<dt>Rendition behavior</dt>
<dd><p>Variable with or without defaults.</p><p>Includes all features
that relate to how a given element looks or behaves interactively
in the context of a particular rendition type. It is mostly bound
to element types, e.g., lists must have a list nature, tables should
have tabular nature, etc. Rendition behaviors are usually specific
to the type of rendition with or without specific required default
behaviors. </p><p>While wide variation in rendition is possible, there
is an intent that the rendition of a given element type be consistent
with its core semantic. For example, a "pre" element <keyword>should
not</keyword> be rendered as flowing text unless it can be shown that
the particular rendering is consistent with the basic semantic of
"pre". In these cases the intent of the specification is often expressed
through definition of variable with defaults rendering effects.</p
></dd>
</dlentry>
<dlentry>
<dt>Processors</dt>
<dd><p>Required invariant and variant.</p><p>Variable with and without
defaults.</p><p>Conforming DITA processors <keyword>must</keyword
>:</p><ul>
<li><p>support all <keyword>required</keyword> features for the category
of implementation;</p></li>
<li><p>support all of the requirements given in the DITA specification
for all of the features implemented by the processor;</p></li>
<li><p>be prepared to interoperate with another implementation that
includes optional features that the processor does <i>not</i> include,
though perhaps with reduced functionality; </p></li>
<li><p>be prepared to interoperate with another implementation that
does <i>not</i> include optional features included by the processor;</p
></li>
<li><p>provide an appropriate set of options or configurations that
will provide required DITA-defined defaults, even if the DITA defaults
are not the processor’s own defaults;</p></li>
<li><p>be able to process conforming DITA documents, but is <i>not</i
> required to support all features that may be present in or used
by those documents;</p></li>
<li><p>be able to process conforming DITA document types, but is <i
>not</i> required to support all features that may be available for
use from those document types; and</p></li>
<li><p>be able to process conforming DITA document types that include
specialization and constraint modules.</p></li>
</ul></dd>
</dlentry>
</dl> </section>
<section> <title>Processors and processor type categories</title><p
>The level of conformance for a given processor can only be determined
by examining the features that the processor implements and the degree
to which these features follow the requirements given in the DITA
Specification.</p><p>Because the number of possible DITA-aware processors
is large, it is useful to define several processor type categories
that help define which requirements apply to which processors. A given
processor may belong to more than one category.</p><dl>
<dlentry>
<dt>DITA-aware processor</dt>
<dd><p>Any processor that implements features defined by the DITA
Specification including all of the required and invariant, the required
but variable, the variable with defaults, and other requirements from
the DITA Specification for the features that it includes.</p><p>All
conforming DITA processors must be specialization aware such that
they are able to correctly produce DITA-defined behavior and processing
results to any conforming DITA document regardless of the details
of its governing document type.</p><p>Processors that are <i>not</i
> DITA aware are not considered conforming, but may still be useful
when working with DITA.</p></dd>
</dlentry>
<dlentry>
<dt>DITA-aware editor</dt>
<dd><p>An interactive application that enables the creation and modification
of conforming DITA documents.</p></dd>
</dlentry>
<dlentry>
<dt>DITA-aware information or content management system</dt>
<dd><p>A processor that stores and manages conforming DITA documents
in a way that takes advantage of DITA-specific aspects of the data
in order to facilitate the management of those documents through a
development or delivery process. Such systems may be content management
systems that support authoring work flows or they may be retrieval
systems that support delivery work flows.</p></dd>
</dlentry>
<dlentry>
<dt>DITA-aware renderer</dt>
<dd><p>A processor that takes as input one or more conforming DITA
documents and produces as output final-form renderings of those documents,
such as HTML pages, paginated PDF, and compiled online help. A DITA
renderer is a processor that is directly responsible for producing
a visual, audible, or interactive result from DITA content, either
by providing the rendition directly or by providing input to a rendition
delivery system (e.g., providing HTML content to a Web browser or
typesetting commands to a pagination system).</p></dd>
</dlentry>
<dlentry>
<dt>DITA-aware source-to-source transformer</dt>
<dd><p>A processor that takes as input one or more DITA or non-DITA
documents and produces as output non-final-form XML documents. At
least one of the input or output documents must be a conforming DITA
document, but the output documents are <i>not</i> required be conforming
DITA documents. Source-to-source transformers <keyword>may</keyword
> be standalone tools or <keyword>may</keyword> be inseparable components
of tools in other categories.</p></dd>
</dlentry>
</dl> </section>
</conbody>
</concept><?Pub Caret -2?>
<?Pub *0000017217 0?>
