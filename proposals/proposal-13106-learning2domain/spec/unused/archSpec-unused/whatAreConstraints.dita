<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2008, v.4002-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<concept
  id="conceptId"
  xml:lang="en-us"
  >
  <?Pub Caret?>
  <title>What are constraints?</title>
  <shortdesc>Constraints restrict XML vocabularies without changing the semantics of the
    vocabularies. In the same way that a specialized vocabulary is interoperable with its base
    vocabulary, a constrained vocabulary is interoperable with the unconstrained
    vocabulary.</shortdesc>
  <prolog>
    <author>Erik Hennum</author>
  </prolog>
  <conbody>
    <draft-comment
      author="wek">Need to define these terms in the terminology section.</draft-comment>
    <p>Constraints support the following kinds of restrictions:</p>
    <dl>
      <dlentry>
        <dt>Restricted content models</dt>
        <dd>In DITA 1.1, an element type has the same unextended content model in all document type
          shells. <p>A constraint on a content model imposes any restriction allowed under the rules
            of specialization without changing the semantics of the container element. In
            particular, a constraint can omit optional elements, restrict the range of occurrences
            for a position, turn a choice with more with one occurrence into a sequence, restrict
            the values of an attribute, remove an attribute, and so on. </p></dd>
      </dlentry>
      <dlentry>
        <dt>Selective domain extension</dt>
        <dd>
          <draft-comment
            author="WEK">Deleted this paragraph because it functions as historical information but
            doesn't actually serve the definition of the feature: In DITA 1.1, a domain extension
            introduces all top-level elements provided by the domain module into all contexts in
            which  those element's base element types appear. This requirement arises because DITA
            establishes vocabulary compatibility by module. For instance, if differing subsets of
            the highlight domain were allowed, two document instances might have the same domains
            declaration where one allowed &lt;b> and &lt;i> and the other allowed &lt;u> (resulting
            in the need to generalize for compatibility). Because vocabulary compatibility is
            established by module, domain extensions cannot replace a base element type but can only
            add alternatives to the base element type. </draft-comment>
          <p>A constraint can extend a base element type with a subset of the specialized element
            types provided by domain vocabularies. In addition, a constraint can omit the base
            element type and supply only the specialized domain element types. Effectively, such
            replacement makes the base element type an abstract element type within the document
            type. </p>
          <p>For example, a constrained domain can choose to extend the &lt;ph> element type with
            the &lt;b> and &lt;i> element types from the highlight domain but omit the &lt;sub>,
            &lt;sup>, &lt;tt>, or &lt;u> element types, which would otherwise also be included
            (because they are all extensions of &lt;ph>). In addition, it can omit the &lt;ph>
            element type itself.</p>
          <p>Selective domain extension applies to both domain vocabularies and topic type
            vocabularies. In particular, constraints can selectively extend base topic types that
            would be otherwise allowed as nested topic types within a given root topic. </p>
        </dd>
      </dlentry>
    </dl>
    <p>As with specialized vocabularies, constraints are implemented using the standard mechanisms
      of XML vocabularies such as document type declarations or XML schemas. Again, as with
      specialization, the DITA architecture provides a layer on top of the basic XML rules that
      imposes design rules and uses architectural attributes to manifest the design to processors.
    </p>
  </conbody>
</concept>
<?Pub *0000003172?>
