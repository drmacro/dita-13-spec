<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<concept
  id="infodom"
  
  xml:lang="en-us">
  <title>Structural versus domain specialization</title>
  <shortdesc>Structural specialization defines new types of structured information, such as new
    topic types or new map types. Domain specialization creates new markup that can be useful in
    multiple structural types, such as new kinds of keywords, tables, or lists, or new attributes
    such as conditional processing attributes.</shortdesc>
  <conbody>
    <p>Structural types define structures for modules of information, such as concept or task or
      reference, which often apply across subject areas (for example, a user interface task and a
      programming task may both consist of a series of steps). When new elements are introduced
      through structural specialization, the elements that contain the new elements must be
      specialized as well; and the new container elements must have their containers specialized in
      turn, all the way to the root element for the module (for example, the &lt;topic> element or
      &lt;map> element).</p>
    <p>Domains typically define markup for a particular domain or subject area, such as programming,
      or hardware. Domain elements become available wherever their ancestor elements are allowed
      once the domains are integrated with the structural specializations in a DITA document type.
      Likewise, domain attributes become available wherever their ancestor attribute (either props
      or base) is allowed. </p>
    <p>Structural and domain hierarchies must share a common base module in order to be integrated
      together. For example, domains for use across topic types must ultimately be specialized from
      elements or the specializable attributes in &lt;topic>; domains for use across both topic
      types and map types must be specialized from the elements or specializable attributes that are
      common to topic types and map types. </p>
    <p>With the exception of the common base modules (topic and map), a domain <term>cannot</term> be specialized from a structural type. For example, a domain cannot be
      specialized from elements in &lt;task>, only from the root structural modules for &lt;topic>
      or &lt;map>. This rule ensures that domains can be integrated and document types can be
      generalized predictably. <ph
        >Structural modules may specialize elements from other domains.</ph><!--
        MP: removed future-looking statement about domains per Yas Etessam's comment, and per TC
        concurrence 2007/01/02 --></p>
  </conbody>
</concept>
