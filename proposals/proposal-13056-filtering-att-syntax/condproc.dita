<?xml version="1.0" encoding="UTF-8"?>
<?Pub Sty _display FontColor="red"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<concept id="condproc" xml:lang="en-us">
<title>Conditional processing (profiling)</title>
<shortdesc><!-- RDA: comment out conref for the purposes of stage 3 review, replace with content <ph conref="../common/conref_file.dita#reuse_file/conditional-processing-shortdesc"
        />-->Attribute-based
        profiling, also known as conditional processing or applicability, is the use of classifying
        metadata that enables the filtering, flagging, searching, indexing, and other processing
        based on the association of an element with one or more values in a specific classification
        domain.</shortdesc>
<conbody>
<p>DITA defines attributes that are specifically intended to enable
filtering or flagging of individual elements. Those attributes are
@audience, @platform, @product, @otherprops, @props, <ph
>and @rev (flagging only).</ph> This enables
the creation of topics and maps that can be dynamically configured
at  processing time to reflect a specific set of conditions, using
the DITA-defined conditional processing profile (DITAVAL).</p><?Pub
Caret 186?>
<p>Processors should be able to perform filtering and flagging using
the attributes listed above. Although metatdata elements exist with
similar names, such as the &lt;audience>       element, processors
are not required to perform conditional processing using metadata
      elements. The @props attribute can be specialized to create
new attributes, and processors       should be able to perform conditional
processing on specializations of @props.</p>
<section id="condprocattrs">       <title>Conditional processing attributes</title
>       <p>For a topic or topicref, the audience, platform, and product
metadata can be expressed with         attributes on the topic or
topicref element or with elements within the topic prolog or     
   topicmeta element. While the metadata elements are more expressive,
the meaning of the         values is the same, and can be used in
coordination. For example, the prolog elements can         fully define
the audiences for a topic, and then metadata attributes can be used
within the         content to identify parts that apply to only some
of those audiences.</p>       <dl>
<dlentry>
<dt>audience</dt>
<dd>The values in the audience attribute may also be used to reference a more complete description
                        of an audience in an audience element. Use the name of the audience in the
                        audience element when referring to the same audience in an audience
                            attribute.<p>The audience attribute takes a space-delimited list of
                            values, which may or may not match the name value of any audience
                            elements. <ph rev="13056" id="groupdefn">The attribute may also include
                                groups of values specified using the same syntax as generalized
                                attributes within @props; see <xref
                                    href="attributegeneralize.dita#attributegeneralize"/> for
                                details on grouping syntax.</ph></p>
                    </dd>
</dlentry>
<dlentry>
<dt>platform</dt>
<dd>The platform might be the operating system, hardware, or other
environment. This             attribute is equivalent to the platform
element for the topic metadata.</dd>
<dd>             <p>The platform attribute takes a space-delimited list of values, which may or may not
                            match the content of a platform element in the prolog. <ph
                                conref="#condproc/groupdefn"/></p>           </dd>
</dlentry>
<dlentry>
<dt>product</dt>
<dd>The product or component name, version, brand, or internal code
or number. This             attribute is equivalent to the prodinfo
element for the topic metadata.</dd>
<dd>             <p>The product attribute takes a space-delimited list of values, which may or may not
                            match the value of the prodname element in the prolog. <ph
                                conref="#condproc/groupdefn"/></p>           </dd>
</dlentry>
<dlentry>
<dt>rev</dt>
<dd>The identifier for the revision level. For example, if a paragraph
was changed or             added during revision 1.1, the rev attribute
might contain the value "1.1". </dd>
</dlentry>
<dlentry
          >
          <dt>otherprops</dt>
          <dd>A catch-all for metadata qualification values about the content. This attribute is
                        equivalent to the othermeta element for the topic metadata. <p>The attribute
                            takes a space-delimited list of values, which may or may not match the
                            values of othermeta elements in the prolog. <ph
                                conref="#condproc/groupdefn"/>
                            <ph rev="13056">The grouping syntax matches the original @otherprops
                                grouping syntax defined in DITA 1.0 and 1.1. That usage was reserved
                                exclusively for @otherprops, and was deprecated in DITA
                            1.2.</ph></p><draft-comment author="robander" rev="13056">Removed these
                            paragraphs from 1.2: <p>For example, a simple otherprops value list:
                                    <codeph>&lt;codeblock otherprops="java
                                    cpp"></codeph></p><p><draft-comment>MP: deprecated grouped value
                                    syntax per TC meeting 2007/01/02</draft-comment>The attribute
                                    <term>may</term> take labeled groups of values as for @props.
                                Processors <term>may</term> treat such values as equivalent to
                                @props or they <term>may</term> treat such values as simple strings.
                                The use of labeled groups in @otherprops is deprecated in favor of
                                using specializations of @props. Processors <term>should</term>
                                clearly document how they treat grouped @otherprops values. See
                                    <xref href="attributegeneralize.dita#attributegeneralize"
                                    format="dita"/> for details on generalized @props attribute
                                values.</p></draft-comment>
                    </dd>
        </dlentry>
<dlentry>
<dt>props</dt>
<dd>A generic attribute for conditional processing values. Starting with DITA 1.1, the props attribute can be specialized to create new conditional processing attributes. <ph
            >See <xref
            href="attributegeneralize.dita#attributegeneralize"
            format="dita"/>.</ph></dd>
</dlentry>
</dl>     </section>
<section id="usingcondatts">
            <title>Using conditional processing attributes</title>
            <p>Each attribute takes zero or more space-delimited string values <ph rev="13056">or
                    grouped values</ph>. For example, you can use the product attribute to identify
                that an element applies to two particular products. </p>
            <fig>
                <title>Example source</title>
                <codeblock>
&lt;p audience="administrator">Set the configuration options:
    &lt;ul>
        &lt;li product="extendedprod">Set foo to bar&lt;/li>
        &lt;li product="basicprod extendedprod">Set your blink rate&lt;/li>
        &lt;li>Do some other stuff&lt;/li>
        &lt;li platform="Linux">Do a special thing for Linux&lt;/li>
    &lt;/ul>
&lt;/p>
            </codeblock>
            </fig>
            <p rev="13056">Groups may be defined using the generalized attribute syntax found in
                    <xref href="attributegeneralize.dita#attributegeneralize" format="dita"/>. This
                is intended to provide subcategories of the attribute; for example, the following
                could be used to indicate that a step applies to one application server and two
                databases. Each group consists of one or more space-delimited string values; groups
                cannot be nested.</p>
            <fig id="groupsample" rev="13056">
                <title>Grouped values in @product</title>
                <codeblock id="groupcodesample">&lt;steps>
  &lt;step>&lt;cmd>Common step&lt;/cmd>&lt;/step>
  &lt;step product="appserver(mySERVER) database(ABC dbOtherName)">
    &lt;cmd>Do something special for databases ABC or OtherName when installing on mySERVER&lt;/cmd>
  &lt;/step>
  &lt;!-- additional steps -->
&lt;/steps></codeblock>
            </fig>
            <p rev="13056">If both grouped values and ungrouped values are found in a single
                attribute, the ungrouped values must be treated as a single group. The following
                product attributes are equivalent:
                <codeblock>product="a database(dbA dbB) b appserver(mySERVER) c"
product="product(a b c) database(dbA dbB) appserver(mySERVER)"</codeblock></p>
            <p rev="13056">If two groups with the same name are found in a single attribute, they
                should be treated as if all values are specified in the same group. The following
                product attributes are
                equivalent:<codeblock>product="database(a b) database(c) appserver(APPNAME)"
product="database(a b c) appserver(APPNAME)"</codeblock></p>
        </section>
<section id="proccondatts">       <title>Evaluating conditional processing
attributes</title>       <p>At processing time, a DITAVAL conditional
processing profile may be used to specify values         you want
to include, exclude, or flag. </p>       <p>For example, a publisher
producing information for a mixed audience using the basic product
        could choose to flag information that applies to administrators,
and exclude information         that applies to the extended product,
by defining a conditional processing profile like         this:<codeblock
>&lt;val>
  &lt;prop att="audience" val="administrator" action="flag">
    &lt;startflag>&lt;alt-text>ADMIN&lt;/alt-text>&lt;/startflag>
  &lt;/prop>
  &lt;prop att="product" val="extendedprod" action="exclude"/>
&lt;/val></codeblock></p>       <p>At output time, the paragraph is
flagged, and the first list item is excluded (since it         applies
to extendedprod), but the second list item is still included (even
though it does         apply to extendedprod, it also applies to basicprod,
which was not excluded).</p>       <p>The result should look something
like: <fig>
<p><b>ADMIN</b> Set the configuration options: <ul>
<li>Set your blink rate</li>
<li>Do some other stuff </li>
<li>Do a special thing for Linux</li>
</ul></p>
</fig></p>
            <p rev="13056">If a conditional processing attribute is set to an empty value
                    (<codeph>product=""</codeph>), this is equivalent to an unspecified attribute.
                An empty group within an attribute is equivalent to an unspecified group. For
                example, <codeph>product="database()"</codeph> is equivalent to
                    <codeph>product=""</codeph>, and <codeph>product="database() A"</codeph> is
                equivalent to <codeph>product="A"</codeph>.</p>
            <p rev="13056">If two groups of the same name exist on different attributes, each group
                will evaluate the same way. Subject schemes may be used to define the same group
                name differently for two different attributes, but for the purposes of DITAVAL
                filtering or flagging, there is no way to distinguish. If there is a need to
                distinguish between a similarly named group on different attributes, the best
                practice is to use more specific group names such as platformGroupname and
                productGroupname. Alternatively, DITAVAL rules can be specified based on the
                attribute name rather than the group name.</p>
            <p rev="13056">Note that in the case where the same group name is used in different
                attributes, a complex scenario could be created where different defaults are
                specified for different attributes, with no rule set for a group or individual
                value. In this case a value may end up evaluating differently in the different
                attributes. For example, a DITAVAL may set a default of "exclude" for @platform and
                a default of "include" for @product. If no rules are specified for group oddgroup(),
                or for the value <codeph>oddgroup="edgecase"</codeph>, the attribute
                    <codeph>platform="oddgroup(edgecase)"</codeph> will evaluate to "exclude" while
                    <codeph>product="oddgroup(edgecase)"</codeph> will resolve to "include".</p>     </section>
<section id="filterlogic">
            <title>Filtering logic</title>
            <p>By default, values in conditional processing attributes that are not defined in a
                DITAVAL profile evaluate to "include". For example, if the value audience="novice"
                is used on a paragraph, but this value is not defined in a DITAVAL profile, the
                attribute evaluates to "include". However, the DITAVAL profile may change this
                default to "exclude", so that any value not explicitly defined in the DITAVAL
                profile will evaluate to "exclude". The profile may also be used to change the
                default for a single attribute; for example, it may declare that values in the
                platform attribute default to exclude while those in the product attribute default
                to include. See <xref href="../langref/containers/ditaval-elements.dita"/> for
                information on how to set up a DITAVAL profile and how to change default
                behaviors.</p>
            <p>When deciding whether to include or exclude a particular element, a processor should
                evaluate each attribute, and then evaluate the set of attributes. <ul>
                    <li>If <b>all</b> the values in a single attribute evaluate to "exclude", the
                        attribute evaluates to "exclude".</li>
                    <li rev="13056">If <b>all</b> thje values in <b>any single group</b> within an
                        attribute evaluate to "exclude", the attribute evaluates to "exclude".</li>
                    <li>If <b>any single attribute</b> evaluates to exclude, the element is
                        excluded.</li>
                </ul></p>
            <p>For example, if a paragraph applies to three products and the publisher has chosen to
                exclude all of them, the processor should exclude the paragraph. This is true even
                if the paragraph applies to an audience or platform that is not excluded. But if the
                paragraph applies to an additional product that has not been excluded, then its
                content is still relevant for the intended output and should be preserved.</p>
            <p rev="13056">Similarly, with groups, a step may apply to one application server and
                two databases, as in the sample above:
                <codeblock conref="#condproc/groupcodesample"/></p>
            <p rev="13056">If a publisher decides to exclude the application server mySERVER, then
                the appserver() group evaluates to exclude. This may be done by setting
                product="mySERVER" to exclude <i>or</i> by setting appserver="mySERVER" to exclude.
                This means the step should be excluded, regardless of how the values "db2" or
                "oracle" evaluate. If a rule is specified for both product="mySERVER" and
                appserver="mySERVER", the rule for the more specific group name "appserver" takes
                precedence.</p>
            <p rev="13056">Similarly, if both "db2" and "oracle" evaluate to exclude, then the
                database() group evaluates to exclude and the element should be excluded regardless
                of how the "WAS" value is set.</p>
            <p rev="13056">In more advanced usage, a DITAVAL may be used to specify a rule for a
                group name. For example, an author could create a DITAVAL rule that sets
                    <codeph>product="database"</codeph> to "exclude". This is equivalent to setting
                a default of "exclude" for any value in a database group (it would also exclude the
                more common usage of "database" as a single token within the product attribute).
                Thus when the token "db2" appears in a database() group within the product
                attribute, the full precedence for determining whether to include or exclude the
                value is as follows: <ol>
                    <li>Check for a DITAVAL rule for database="db2"</li>
                    <li>Check for a DITAVAL rule for product="db2"</li>
                    <li>Check for a DITAVAL rule for product="database" (default for the database
                        group)</li>
                    <li>Check for a DITAVAL rule for "product" (default for the product
                        attribute)</li>
                    <li>Check for a default rule for all conditions</li>
                    <li>Otherwise, evaluate to "include"</li>
                </ol></p>
        </section>
<section id="flaglogic">       <title>Flagging logic</title>     
 <p>When deciding whether to flag a particular element, a processor
should evaluate each value.         Wherever a value that has been
set as flagged appears in its attribute (for example,         audience="administrator")
the process should add the flag. When multiple flags apply to a  
      single element, multiple flags should be rendered, typically
in the order they are         encountered.</p>       <p>Flagging could
be done using text (for example, bold text against a colored background)
or         using images. When the same element evaluates as both flagged
and filtered (for example,         flagged because of an audience
attribute value and filtered because of its product attribute    
    values), the element should be filtered.</p>     </section>
</conbody>
</concept>
<?Pub *0000010338?>
