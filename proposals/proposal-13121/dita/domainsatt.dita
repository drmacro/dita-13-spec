<?xml version="1.0" encoding="UTF-8"?>
<?Pub Sty _display FontColor="red"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<concept id="domainsatt" xml:lang="en-us">
<title>Domain usage declaration (the @domains attribute)</title>
<shortdesc rev="DITA1.3 proposal-13121">Structural types <term>must</term> declare the domain
    vocabulary modules and constraint modules they use, as well as any dependencies they have on
    elements from other (non-ancestor) structural modules. This is done with the @domains attribute,
    whose value is a sequence of parenthesized module ancestry specifications. The @domains
    attribute is declared on the root element for each topic or map type. Structural modules
      <term>should</term> declare their structural ancestry, and <term>must</term> do so if they
    have dependencies on other structural modules other than their ancestors.</shortdesc>
<conbody>
<p
      >Each structural, element, and attribute domain defines its module ancestry as a parenthesized sequence of space-separated module names from root module to provided module. </p>
    <p
      >For element domains, the group syntax is:<codeblock> '(', <varname>modulename</varname>, (' ', <varname>modulename</varname>)+, ')'</codeblock></p>
    <p
      >For attribute domains, the group syntax is:<codeblock> 'a(', <varname>attname</varname>, (' ', <varname>attname</varname>)+, ')'</codeblock>The module ancestry specifications are added to the effective value of the @domains attribute to form a set of specifications, one for each domain used by the topic or map type.</p>
    <p
      >The @domains values for the different module types are as follows:<dl>
      <dlentry rev="DITA1.3 proposal-13121">
          <dt>structural modules</dt>
          <dd>
            <p>The structural type ancestry. For example: <codeph>(topic concept
                glossentry)</codeph>. </p>
            <p>When a structural module has elements that directly reference or specialize elements
              from another structural, domain, or attribute module, the structural module's @domains
              specification <term>must</term> include the names of the other modules as dependencies
              following the name of the structural domain.</p>
            <p>Dependencies on domain or attribute specialization modules are appended to the
              reusing module's value, or to previous dependencies, separated by "+". Dependencies on
              structural specialization modules are appended to the reusing module's value, or to
              previous dependencies, separated by "++". A dependency can be on an attribute domain
              module, binding an attribute to a particular element as part of the element
              specialization, or on an element domain module or structural module, including an
              element or branch of elements as part of the content model for an element
              specialization.</p>
            <p> For example, a cppAPIRef specialization that has a dependency on the cpp-d element
              domain and compilerTypeAtt-d attribute domain would need to include a domain value
              that showed the dependencies as follows: <codeph>(topic reference
                cppApiRef+cpp-d+compilerTypeAtt-d)</codeph>. A codeChecklist specialization that has
              a dependency on the pr-d domain and the task structural specialization would show
              dependencies as follows: <codeph>(topic reference
              codeChecklist+pr-d++task)</codeph></p>
          </dd>
        </dlentry>
        <dlentry rev="DITA1.3 proposal-13121">
          <dt>structural module dependencies</dt>
          <dd>
            <p>The structural type ancestry of the structural type whose elements are being reused.
              For example, if a troubleshooting module reuses elements from the task structural
              module, then it must include both a dependency on task in the troubleshooting ancestry
              value, and the ancestry of task in a separate value: <codeph>(topic
                troubleshooting++task) (topic task)</codeph></p>
            <p>For more information on the syntax for expressing structural module dependencies see
                <xref href="sharing-elements-across-modules.dita#topic_tm3_dlh_zl">.</xref></p>
          </dd>
        </dlentry>
      <dlentry>
        <dt>constraint modules</dt>
        <dd>The structural type ancestry followed by the name of the constraint domain. For example: <codeph>(topic task strictTaskbody-c)</codeph>. </dd>
      </dlentry>
      <dlentry>
        <dt>element domains</dt>
        <dd>The structural type ancestry and, if applicable, the domain module ancestry from which the domain is specialized. For example: <codeph>(topic hi-d)</codeph>
          <codeph>(topic pr-d cpp-d)</codeph>.</dd>
      </dlentry>
      <dlentry>
        <dt>attribute domains</dt>
        <dd>The attribute specialization hierarchy. For example: <codeph>a(props mySelectAttribute)</codeph>. </dd>
      </dlentry>
      </dl></p>
<p>The @domains attribute allows processors to determine whether or
not two elements use       compatible domains. For example, when pasting
content from one topic into another topic within       an editor,
the editor can use the @domains attribute to determine if the paste
target topic's       domains are compatible with the paste source
topic's domains and therefore whether or not the       pasted content
needs to be generalized before it can be pasted. Likewise, processors
can use       the value of the @domains attribute to determine if
they have whatever may be necessary to       support a particular
domain.</p>
    <p>Another example is when an element references an element that is a more specialized version
      of the element, for example. a &lt;li> element of concept topic references a &lt;step> element
      in a task topic. During processing, the &lt;step> element will be generalized back to a
      &lt;li> element.</p>
    <draft-comment>there was an example at the end of this topic that had the previous two
      paragraphs. One of them was a duplicate of the paragraph starting "The @domains attribute
      allows..." so I just moved the "Another example.." paragraph up here and deleted the example
      section, which was redundant</draft-comment>
<p>The effective value of the @domains attribute is constructed using
integration mechanisms       specific to each XML document constraint
language. Each domain and constraint module         <keyword>must</keyword> provide
a @domains attribute value fragment that can be used by DITA     
 document types to construct the effective @domains attribute value.
Each structural vocabulary       module <keyword>should</keyword> provide
a @domains attribute value fragment. See <xref format="dita"
href="createCustomDocType.dita#createCustomDocType"></xref>.</p>
<example>       <title>Example: task with multiple domains</title><codeblock>&lt;task id="mytask" class="- topic/topic task/task " 
	domains="(topic ui-d) (topic sw-d) (topic pr-d)">
...
&lt;/task></codeblock><p>In this example, the task allows the use
of elements for describing user interfaces (ui-d),         software
(sw-d), and also programming (pr-d).</p><p>If the document used a
specialization of the programming domain to describe C++ programming,
the new domain would need a separate entry in the @domains attribute,
e.g.:</p><codeblock>&lt;task id="mytask" class="- topic/topic task/task " 
	domains="(topic ui-d) (topic sw-d) (topic pr-d) (topic pr-d cpp-d)">
...
&lt;/task></codeblock><?Pub Caret -1?></example>
</conbody>
</concept>
<?Pub *0000004155?>
